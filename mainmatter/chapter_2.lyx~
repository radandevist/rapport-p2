#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass report
\begin_preamble
%           Liste des packages         %

% Faux texte, juste pour la démo
\usepackage{blindtext}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Réglage des fontes et typo    
\usepackage[utf8]{inputenc}		% LaTeX, comprend les accents !
\usepackage[T1]{fontenc}
\usepackage{float}
\usepackage{graphicx}

%\usepackage[square,sort&compress,sectionbib]{natbib}		% Doit être chargé avant babel
\usepackage[numbers]{natbib}
\usepackage{chapterbib}
	%\renewcommand{\bibsection}{\section{Références}}		% Met les références biblio dans un \section (au lieu de \section*)
		
\usepackage[frenchb]{babel}
\usepackage{lmodern}
\usepackage{ae,aecompl}						% Utilisation des fontes vectorielles modernes
\usepackage[upright]{fourier}



% Apparence globale      
\usepackage[top=2cm, bottom=2cm, left=2.5cm, right=2cm, headheight=15pt]{geometry} 
\usepackage{fancyhdr}			% Entête et pieds de page
	\pagestyle{fancy}			% Indique que le style de la page sera justement fancy
	\lfoot[\thepage]{} %gauche du pied de page
	\cfoot{} %milieu du pied de page
	\rfoot[]{\thepage} %droite du pied de page
	\fancyhead[RO, LE] {}	
\usepackage{enumerate}
\usepackage{enumitem}
\usepackage[section]{placeins}	% Place un FloatBarrier à chaque nouvelle section
\makeatletter% même chose pour les \subsection que le package ne gère pas
\renewcommand\subsection{\FloatBarrier\@startsection{subsection}{2}{\z@}
{-3.25ex\@plus -1ex \@minus -.2ex}
{1.5ex \@plus .2ex}{\normalfont\large\bfseries}}
\makeatother
\usepackage{epigraph}
\usepackage[font={small}]{caption}
\usepackage[francais]{minitoc}		% Mini table des matières, en français
	\setcounter{minitocdepth}{2}	% Mini-toc détaillées (sections/sous-sections)
\usepackage{pdflscape}				% Permet d'utiliser des pages au format paysage

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Maths                         
\usepackage{amsmath}			% Permet de taper des formules mathématiques
\usepackage{amssymb}			% Permet d'utiliser des symboles mathématiques
\usepackage{amsfonts}			% Permet d'utiliser des polices mathématiques
\usepackage{nicefrac}
\usepackage{upgreek}			% For roman (i.e. upright) lowercase Greek characters

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%Profondeur titre

\renewcommand\theparagraph{\alph{paragraph})}
\setcounter{secnumdepth}{4}
\setcounter{tocdepth}{4}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%% Tableaux
\usepackage{multirow}
\usepackage{booktabs}
\usepackage{colortbl}
\usepackage{tabularx}
\usepackage{multirow}
\usepackage{threeparttable}
\usepackage{etoolbox}
	\appto\TPTnoteSettings{\footnotesize}
\addto\captionsfrench{\def\tablename{{\textsc{Tableau}}}}	% Renome 'table' en 'tableau'

            
            

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Graphiques                    
\usepackage{graphicx}			% Permet l'inclusion d'images
\usepackage{subcaption}
\usepackage{pdfpages}
\usepackage{rotating}
\usepackage{pgfplots}
	\usepgfplotslibrary{groupplots}
\usepackage{tikz}
	\usetikzlibrary{backgrounds,automata}
	\pgfplotsset{width=7cm,compat=1.3}
	\tikzset{every picture/.style={execute at begin picture={
   		\shorthandoff{:;!?};}
	}}
	\pgfplotsset{every linear axis/.append style={
		/pgf/number format/.cd,
		use comma,
		1000 sep={\,},
	}}
\usepackage{eso-pic}
\usepackage{import}
\usepackage{cclicenses}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Biblio                        
\makeatletter
\patchcmd{\BR@backref}{\newblock}{\newblock(page~}{}{}	% Pour les back-references, affiche 'page' au lieu de 'p.'
\patchcmd{\BR@backref}{\par}{)\par}{}{}
\makeatother
	
	
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Navigation dans le document   
\usepackage[pdftex,pdfborder={0 0 0},
			colorlinks=true,
			linkcolor=black,
			citecolor=black,
			pagebackref=false,
			]{hyperref} %Créera automatiquement les liens internes au PDF


% Mise en forme du texte        
\usepackage{xspace}
\usepackage[load-configurations = abbreviations]{siunitx}
	\DeclareSIUnit{\MPa}{\mega\pascal}
	\DeclareSIUnit{\micron}{\micro\meter}
	\DeclareSIUnit{\tr}{tr}
	\DeclareSIPostPower\totheM{m}
	\sisetup{
	locale = FR,
	  inter-unit-separator=$\cdot$,
	  range-phrase=~\`{a}~,     	% Utilise le tiret court pour dire "de... à"
	  range-units=single,  			% Cache l'unité sur la première borne
	  }
\usepackage{chemist}
\usepackage[version=3]{mhchem}
\usepackage{textcomp}
\usepackage{numprint}
\usepackage{array}
% \usepackage[acronym,xindy,toc]{glossaries}
% 	\newglossary[nlg]{notation}{not}{ntn}{Notation} 	% Création d'un type de glossaire 'notation'
% 	\makeglossaries
% 	\loadglsentries{Glossaire}	% Utilisation d'un fichier externe pour la définition des entrées (Glossaire.tex)
% \usepackage{hyphenat}


% Compilation

\usepackage{silence}
%
%% Virer les erreur dues à minitoc
\WarningFilter{minitoc(hints)}{W0023}
\WarningFilter{minitoc(hints)}{W0024}
\WarningFilter{minitoc(hints)}{W0028}
\WarningFilter{minitoc(hints)}{W0030}

 

%           Page de garde              %
\makeatletter
\def\@ecole{}
\newcommand{\ecole}[1]{
  \def\@ecole{#1}
}

\def\@specialite{}
\newcommand{\specialite}[1]{
  \def\@specialite{#1}
}

\def\@departement{}
\newcommand{\departement}[1]{
  \def\@departement{#1}
}

\def\@typeRapport{}
\newcommand{\typeRapport}[1]{
  \def\@typeRapport{#1}
}

\def\@anneeUniversitaire{}
\newcommand{\anneeUniversitaire}[1]{
  \def\@anneeUniversitaire{#1}
}

\def\@nomPromo{}
\newcommand{\nomPromo}[1]{
  \def\@nomPromo{#1}
}

\def\@encadreura{}
\newcommand{\encadreura}[1]{
  \def\@encadreura{#1}
}

\def\@encadreurb{}
\newcommand{\encadreurb}[1]{
  \def\@encadreurb{#1}
}

\def\@encadreurc{}
\newcommand{\encadreurc}[1]{
  \def\@encadreurc{#1}
}

\def\@jurya{}{}{}
\newcommand{\jurya}[3]{
  \def\@jurya{#1	& #2	& #3\\}
}
\def\@juryb{}{}{}
\newcommand{\juryb}[3]{
  \def\@juryb{#1,	& #2	& #3\\}
}
\def\@juryc{}{}{}
\newcommand{\juryc}[3]{
  \def\@juryc{#1,	& #2	& #3\\}
}
\def\@juryd{}{}{}
\newcommand{\juryd}[3]{
  \def\@juryd{#1,	& #2	& #3\\}
}
\def\@jurye{}{}{}
\newcommand{\jurye}[3]{
  \def\@jurye{#1,	& #2	& #3\\}
}
\def\@juryf{}{}{}
\newcommand{\juryf}[3]{
  \def\@juryf{#1,	& #2	& #3\\}
}
\def\@juryg{}{}{}
\newcommand{\juryg}[3]{
  \def\@juryg{#1,	& #2	& #3\\}
}
\def\@juryh{}{}{}
\newcommand{\juryh}[3]{
  \def\@juryh{#1,	& #2	& #3\\}
}
\def\@juryi{}{}{}
\newcommand{\juryi}[3]{
  \def\@juryi{#1,	& #2	& #3\\}
}

\makeatother

\makeatletter

\makeatother
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language french
\language_package babel
\inputencoding utf8
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style french
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
Configuration des Interfaces WebRTC
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
minitoc
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
WebRTC offre des opportunités sans précédent aux développeurs qui souhaitent
 intégrer des communications en temps réel dans leurs applications.
\end_layout

\begin_layout Standard
Les API WebRTC getUserMedia, RTCPeerConnection et RTCDataChannel jouent
 chacune leur propre rôle dans la capture, la transmission et la diffusion
 de données en temps réel (depuis la webcam et le microphone d'un ordinateur)
 vers un autre navigateur, sans qu'un utilisateur ait à télécharger des
 plug-ins ou des modules complémentaires
\begin_inset CommandInset citation
LatexCommand cite
key "onsip-2021"
literal "false"

\end_inset

.
\end_layout

\begin_layout Section
Signalisation
\begin_inset CommandInset label
LatexCommand label
name "sec:Signalisation"

\end_inset


\end_layout

\begin_layout Standard
La spécification WebRTC inclut des API pour communiquer avec un serveur
 ICE , mais le composant de signalisation n'en fait pas partie
\begin_inset CommandInset ref
LatexCommand eqref
reference "subsec:Pourquoi-la-signalisation"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 La signalisation est nécessaire pour que deux pairs partagent la façon
 dont ils doivent se connecter.
 Habituellement, cela est résolu via une API Web standard basée sur HTTP
 (c'est-à-dire un service REST ou un autre mécanisme RPC) où les applications
 Web peuvent relayer les informations nécessaires avant que la connexion
 entre homologues ne soit lancée
\begin_inset CommandInset citation
LatexCommand cite
key "webrtc-org-2014"
literal "false"

\end_inset

.
\end_layout

\begin_layout Standard
L'extrait de code provenant de 
\begin_inset CommandInset citation
LatexCommand cite
key "webrtc-org-2014"
literal "false"

\end_inset

 suivant, montre comment un service de signalisation fictif peut être utilisé
 pour envoyer et recevoir des messages de manière asynchrone.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "style=ES6"
inline false
status open

\begin_layout Plain Layout

// Configurer un canal de communication asynchrone qui
\end_layout

\begin_layout Plain Layout

// sera utilisé lors de la configuration de la connexion peer
\end_layout

\begin_layout Plain Layout

const signalingChannel = new SignalingChannel(remoteClientId);
\end_layout

\begin_layout Plain Layout

signalingChannel.addEventListener('message', message => {
\end_layout

\begin_layout Plain Layout

  // Nouveau message du client distant reçu
\end_layout

\begin_layout Plain Layout

});
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// Envoyer un message asynchrone au client distant
\end_layout

\begin_layout Plain Layout

signalingChannel.send('Hello!');
\end_layout

\end_inset


\end_layout

\begin_layout Section
RTCPeerConnection
\end_layout

\begin_layout Standard
L'API RTCPeerConnection est chargé de connecter deux (02) navigateurs ensemble
 afin qu'ils puissent partager des médias en temps réel
\begin_inset CommandInset citation
LatexCommand cite
key "onsip-2021"
literal "false"

\end_inset

.
 Elle est au cœur de la connexion peer-to-peer entre chacun des navigateurs.
\end_layout

\begin_layout Subsection
RTCConfiguration
\begin_inset CommandInset label
LatexCommand label
name "subsec:RTCConfiguration"

\end_inset


\end_layout

\begin_layout Standard
Chaque connexion peer est gérée par un objet RTCPeerConnection.
 Le constructeur de cette classe prend un seul objet RTCConfiguration comme
 paramètre.
 Cet objet définit la configuration de la connexion peer et doit contenir
 des informations sur les serveurs ICE à utiliser
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Le dictionnaire complet des membres de RTCConfiguration peut être accédée
 à l'addresse https://developer.mozilla.org/en-US/docs/Web/API/RTCConfiguration
\end_layout

\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "webrtc-org-2014"
literal "false"

\end_inset

.
\end_layout

\begin_layout Standard
L’établissement de connectivité interactive (ICE) est une technique utilisée
 dans les réseaux informatiques pour trouver des moyens pour que deux ordinateur
s communiquent aussi directement que possible dans les réseaux peer-to-peer.
 Il est le plus souvent utilisé pour les médias interactifs tels que la
 voix sur IP (VoIP
\begin_inset CommandInset nomenclature
LatexCommand nomenclature
symbol "VoIP"
description "Voice over Internet Protocol"
literal "false"

\end_inset

), les communications peer-to-peer, la vidéo et la messagerie instantanée.
 Dans de telles applications, mieux vaut éviter de communiquer via un serveur
 central (ce qui ralentirait la communication et serait coûteux), mais la
 communication directe entre les applications clientes sur Internet est
 très délicate en raison des traducteurs d'adresses réseau (NAT
\begin_inset CommandInset nomenclature
LatexCommand nomenclature
symbol "NAT"
description "Network Address Translation"
literal "false"

\end_inset

), des pare-feu et d'autres barrières du réseau
\begin_inset CommandInset citation
LatexCommand cite
key "wikipedia-contributors-2020"
literal "false"

\end_inset

.
\end_layout

\begin_layout Subsection
Initialisation
\end_layout

\begin_layout Standard
Une fois la configuration éffectuée il suffit d'instancier l'interface de
 l'API RTCPeerConnection afin d'initialiser une connection et ce sans oublier
 de fournir l'argument configuration dans la signature du constructeur.
 Le bout de code suivant, tiré de 
\begin_inset CommandInset citation
LatexCommand cite
key "webrtc-org-2014"
literal "false"

\end_inset

 montre comment éffectuer celà.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "style=ES6"
inline false
status open

\begin_layout Plain Layout

const configuration: RTCConfiguration = {
\end_layout

\begin_layout Plain Layout

  iceServers: [{'urls': 'stun:stun.l.google.com:19302'}],
\end_layout

\begin_layout Plain Layout

};
\end_layout

\begin_layout Plain Layout

const peerConnection = new RTCPeerConnection(configuration);
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
RTCSessionDescription
\end_layout

\begin_layout Standard
RTCPeerConnection coordonne l'échange de métadonnées cruciales entre deux
 navigateurs.
 Ces données définissent le numéro IP et l'adresse de port publiquement
 identifiables d'un navigateur afin que les médias en temps réel puissent
 être échangés.
\end_layout

\begin_layout Standard
Pour que deux points de terminaison WebRTC commencent à se parler, trois
 types d'informations doivent être relayées:
\end_layout

\begin_layout Enumerate
Les informations de contrôle de session déterminent quand initialiser, fermer
 et modifier les sessions de communication.
\end_layout

\begin_layout Enumerate
Les données réseau relayent l'adresse IP et le numéro de port de chaque
 point de terminaison afin que les appelants puissent trouver les personnes
 appelées.
\end_layout

\begin_layout Enumerate
Les données média concernent les codecs et les types de média que les appelants
 ont en commun.
\end_layout

\begin_layout Standard
Ces informations seront encapsulées dans un objet RTCSessionDescription.
\end_layout

\begin_layout Standard
L'interface RTCSessionDescription décrit une extrémité d'une connexion (ou
 connexion potentielle) et comment elle est configurée.
 Chaque objet RTCSessionDescription consiste en un type de description indiquant
 quelle partie du processus de négociation il décrit (offre ou réponse)
 et du descripteur SDP de la session
\begin_inset CommandInset citation
LatexCommand cite
key "mozilla-org-2021"
literal "false"

\end_inset

.
\end_layout

\begin_layout Standard
Le processus de négociation d'une connexion entre deux peers implique l'échange
 d'objets RTCSessionDescription dans les deux sens, par le biais du canal
 de signalisation
\begin_inset CommandInset ref
LatexCommand eqref
reference "subsec:Signalisation-et-négotiation"
plural "false"
caps "false"
noprefix "false"

\end_inset

, chaque description suggérant une combinaison d'options de configuration
 de connexion que l'expéditeur de la description prend en charge.
 Une fois que les deux pairs se sont mis d'accord sur une configuration
 pour la connexion, la négociation est terminée
\begin_inset CommandInset citation
LatexCommand cite
key "mozilla-org-2021"
literal "false"

\end_inset

.
\end_layout

\begin_layout Subsubsection
Initialisation, transmission et négotiation
\end_layout

\begin_layout Standard
Voici comment une description de session sera initiée en tant qu'une offre
 puis envoyée de la part du client local vers un client distant, sans oublier
 comment ce même client négociera une potentielle réponse de son correspondant
\begin_inset CommandInset citation
LatexCommand cite
key "webrtc-org-2014"
literal "false"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "style=ES6"
inline false
status open

\begin_layout Plain Layout

// Écouter la récéption d'un message sur le canal de signalisation
\end_layout

\begin_layout Plain Layout

signalingChannel.addEventListener('message', async message => {
\end_layout

\begin_layout Plain Layout

  if (message.answer) { // Si le message comporte une réponse
\end_layout

\begin_layout Plain Layout

    // assigner la réponse en tant que description de session distante
\end_layout

\begin_layout Plain Layout

    const remoteDesc = new RTCSessionDescription(message.answer);
\end_layout

\begin_layout Plain Layout

    await peerConnection.setRemoteDescription(remoteDesc);
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

});
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// Créer une description de session associée à l'offre
\end_layout

\begin_layout Plain Layout

const offer = await peerConnection.createOffer();
\end_layout

\begin_layout Plain Layout

await peerConnection.setLocalDescription(offer);
\end_layout

\begin_layout Plain Layout

// Puis envoyer cette offre au client distant
\end_layout

\begin_layout Plain Layout

signalingChannel.send({'offer': offer});
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Et ci-après, comment du côté d'un client distant auquel sera demandé une
 communication, la négiociation d'une offre qui lui aboutit sera faite
\begin_inset CommandInset citation
LatexCommand cite
key "webrtc-org-2014"
literal "false"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "style=ES6"
inline false
status open

\begin_layout Plain Layout

// Écouter la récéption d'un message sur le canal de signalisation
\end_layout

\begin_layout Plain Layout

signalingChannel.addEventListener('message', async message => {
\end_layout

\begin_layout Plain Layout

  if (message.offer) { // Si le message contient une offre
\end_layout

\begin_layout Plain Layout

	// assigner l'offre en tant que description de session distante
\end_layout

\begin_layout Plain Layout

    const remoteDesc = new RTCSessionDescription(message.offer);
\end_layout

\begin_layout Plain Layout

    peerConnection.setRemoteDescription(remoteDesc);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    // Puis créer une description de session associée à la réponse
\end_layout

\begin_layout Plain Layout

    const answer = await peerConnection.createAnswer();
\end_layout

\begin_layout Plain Layout

    await peerConnection.setLocalDescription(answer);
\end_layout

\begin_layout Plain Layout

	
\end_layout

\begin_layout Plain Layout

	// Efin renvoyer cette réponse au client ayant envoyé l'offre
\end_layout

\begin_layout Plain Layout

    signalingChannel.send({'answer': answer});
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

});
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Candidats ICE
\end_layout

\begin_layout Standard
Aavant que deux peers puissent communiquer en utilisant WebRTC, ils doivent
 echanger des informations de connectivité.
 Étant donné que les conditions du réseau peuvent varier en fonction d'un
 grand nombre de facteurs, un service externe est généralement utilisé pour
 découvrir les candidats possibles pour se connecter à un peer.
 Ce service s'appelle ICE et utilise un serveur STUN
\begin_inset CommandInset nomenclature
LatexCommand nomenclature
symbol "STUN"
description "Session Traversal Utilities for NAT"
literal "false"

\end_inset

 ou TURN
\begin_inset CommandInset nomenclature
LatexCommand nomenclature
symbol "TURN"
description "Traversal Using Relay NAT"
literal "false"

\end_inset

.
 STUN signifie «Session Traversal Utitlities for NAT», et est généralement
 utilisé indirectement dans la plupart des applications WebRTC
\begin_inset CommandInset citation
LatexCommand cite
key "webrtc-org-2014"
literal "false"

\end_inset

.
\end_layout

\begin_layout Standard
TURN (Traversal Using Relay NAT) est la solution la plus avancée qui intègre
 les protocoles STUN et la plupart des services commerciaux basés sur WebRTC
 untilsent un serveur TURN pour établir des liens entre peers.
 L'API WebRTC prend en charge à la fois STUN et TURN directement et il est
 regroupé sous le terme complet «Internet Connectivity Establishment»
\begin_inset CommandInset citation
LatexCommand cite
key "webrtc-org-2014"
literal "false"

\end_inset

.
 Lors de la création d'une connexion WebRTC, nous fournissons généralement
 un ou plusieurs serveurs ICE dans la configuration de RTCPeerConnection
\begin_inset CommandInset ref
LatexCommand eqref
reference "subsec:RTCConfiguration"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Subsubsection
Ruisselement de l'ICE
\end_layout

\begin_layout Standard
Une fois qu'un objet RTCPeerConnection est créé, le framework sous-jacent
 utilise les serveurs ICE pour rassembler les candidats à L'établissement
 de la connectivité (candidats ICE).
 L'évènement 
\begin_inset listings
lstparams "style=ES6"
inline true
status open

\begin_layout Plain Layout

icegatheringstatechange
\end_layout

\end_inset

 de l'API RTCPeerConnection signale à quel état se trouve la collecte ICE
 (
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

new
\end_layout

\end_inset

, 
\begin_inset listings
lstparams "style=ES6"
inline true
status open

\begin_layout Plain Layout

gathering
\end_layout

\end_inset

 ou alors 
\begin_inset listings
lstparams "style=ES6"
inline true
status open

\begin_layout Plain Layout

complete
\end_layout

\end_inset

)
\begin_inset CommandInset citation
LatexCommand cite
key "webrtc-org-2014"
literal "false"

\end_inset

.
\end_layout

\begin_layout Standard
Bien qu'il soit possible pour un peer d'attendre la fin de la collecte ICE,
 il est généralement beaucoup plus éfficace d'utiliser une technique de
 «ruissellement» et de transmettre chaque candidats ICE au peer distant
 au fur et à mesure qu'il en est découvert.
 Celà résulte par une considérable réduction du temps d'installation de
 la connectivité des peers et permet d'entamer une conversation vidéo avec
 moins de retard
\begin_inset CommandInset citation
LatexCommand cite
key "webrtc-org-2014"
literal "false"

\end_inset

.
\end_layout

\begin_layout Standard
Pour rassembler des candidats ICE, il suffit d'ajouter un écouteur pour
 l'évènement 
\begin_inset listings
lstparams "style=ES6"
inline true
status open

\begin_layout Plain Layout

icecandidate
\end_layout

\end_inset

.
 L'évenement RTCPeerConnectionICEevent émis sur cet écouteur contiendra
 la propriété candate qui représente un nouveau candidat qui devrait être
 envoyé au peer distant
\begin_inset CommandInset ref
LatexCommand eqref
reference "subsec:Signalisation-et-négotiation"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "style=ES6"
inline false
status open

\begin_layout Plain Layout

// Écouter les candidats ICE locaux sur l'objet RTCPeerConnection local
 
\end_layout

\begin_layout Plain Layout
\noindent

peerConnection.addEventListener('icecandidate', event => {
\end_layout

\begin_layout Plain Layout

  if (event.candidate) {
\end_layout

\begin_layout Plain Layout

    signalingChannel.send({'new-ice-candidate': event.candidate});
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

});
\end_layout

\begin_layout Plain Layout

// Écouter les candidats ICE distants et les ajouter
\end_layout

\begin_layout Plain Layout

// à la connexion RTCPeerConnection locale
\end_layout

\begin_layout Plain Layout

signalingChannel.addEventListener('message', async message => {
\end_layout

\begin_layout Plain Layout

  if (message.iceCandidate) {
\end_layout

\begin_layout Plain Layout

    try {
\end_layout

\begin_layout Plain Layout

      await peerConnection.addIceCandidate(message.iceCandidate);
\end_layout

\begin_layout Plain Layout

    } catch (e) {
\end_layout

\begin_layout Plain Layout

      console.error('Error adding received ice candidate', e);
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

});
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Une fois que les candidats ICE sont reçus, nous devons nous attendre à ce
 que l'état de notre connexion peer passe éventuellement à un état connecté.
 Pour détecter cela, nous ajoutons un écouteur à notre RTCPeerConnection
 où nous écoutons les événements 
\begin_inset listings
lstparams "style=ES6"
inline true
status open

\begin_layout Plain Layout

connectionstatechange
\end_layout

\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "webrtc-org-2014"
literal "false"

\end_inset

.
\end_layout

\begin_layout Section
getUserMedia
\end_layout

\begin_layout Standard
L'API getUserMedia permet d'accéder aux flux multimédias (vidéo, audio ou
 les deux) à partir des périphériques locaux.
 À elle seule, cette API est capable d'acquérir de l'audio et de la vidéo,
 sans envoyer les données ni les stocker dans un fichier.
 Pour avoir un chat fonctionnel, nous devons envoyer ces données en utilisant
 l'API RTCPeerConnection.
\end_layout

\begin_layout Standard
À elle seule, cette API est uniquement capable d'acquérir de l'audio et
 de la vidéo, sans envoyer les données ni les stocker dans un fichier.
 Pour avoir un chat fonctionnel, nous devons envoyer ces données en utilisant
 l'API RTCPeerConnection
\begin_inset CommandInset citation
LatexCommand cite
key "rosa-2014"
literal "false"

\end_inset

.
\end_layout

\begin_layout Subsection
Mediadevices
\end_layout

\begin_layout Standard
L'interface Navigator représente l'état et l'identité de l'agent utilisateur.
 Il permet aux scripts de l'interroger et de s'enregistrer pour effectuer
 certaines activités.
 Un objet Navigator peut être récupéré à l'aide de la propriété readonly
 
\begin_inset listings
lstparams "style=ES6"
inline true
status open

\begin_layout Plain Layout

window.navigator
\end_layout

\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "mozilla-org-2021B"
literal "false"

\end_inset

.
\end_layout

\begin_layout Standard
L'interface Navigator dans le navigateur fournit des fonctions et des propriétés
 pour accéder à l'état et aux fonctionnalités du navigateur grâce auxquelles
 nous pouvons obtenir l'état du navigateur ou accéder à un large éventail
 de fonctionnalités.
 Par exemple, en utilisant 
\begin_inset listings
lstparams "style=ES6"
inline true
status open

\begin_layout Plain Layout

navigator.online
\end_layout

\end_inset

, nous pouvons obtenir l'état de connexion du navigateur avec Internet
\begin_inset CommandInset citation
LatexCommand cite
key "rajan-2021"
literal "false"

\end_inset

.
\end_layout

\begin_layout Standard
L'interface MediaDevices comprise dans Navigator, permet d'accéder aux périphéri
ques d'entrée multimédia connectés tels que les caméras et les microphones,
 ainsi que le partage d'écran.
 En substance, il vous permet d'accéder à n'importe quelle source matérielle
 de données multimédias
\begin_inset CommandInset citation
LatexCommand cite
key "mozilla-org-2021B"
literal "false"

\end_inset

.
\end_layout

\begin_layout Standard
Les fonctions de l'objet mediaDevices fournissent des fonctionnalités telles
 que le partage d'écran, l'obtention de flux depuis la caméra et les microphones.
 La fonction getUserMedia est celle dont nous avons besoin pour récupérer
 les flux de la caméra et des microphones
\begin_inset CommandInset citation
LatexCommand cite
key "rajan-2021"
literal "false"

\end_inset

.
\end_layout

\begin_layout Subsection
Capture des médias et contraintes
\end_layout

\begin_layout Standard
La méthode 
\begin_inset listings
lstparams "style=ES6"
inline true
status open

\begin_layout Plain Layout

getUsermedia()
\end_layout

\end_inset

 à besoin qu’on lui passe un objet MediaStreamConstraints en tant qu'argument
 pour qu’uelle fonctionne.
 Cet argument, active le type de communication voulu (vidéo, audio ou les
 deux) et contient les contraintes ainsi que les paramètres du flux de média
 qui sera généré par la suite.
 La suppression de bruit, l’ annulation de l’écho, le ratio de la video,
 le volume du son, la luminosité de l’image, etc sont quelques éxemples
 de ces paramètres en question
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Une liste complète des contraintes et paramètres de flux de média peut être
 consultée à l'addresse url: https://developer.mozilla.org/en-US/docs/Web/API/Medi
aTrackConstraints
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "style=ES6"
inline false
status open

\begin_layout Plain Layout

// Caméra avec une résolution aussi proche que possible de 640x480
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

  'video': {
\end_layout

\begin_layout Plain Layout

    'width': 640,
\end_layout

\begin_layout Plain Layout

    'height': 480
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Le dictionnaire MediaStreamConstraints est utilisé lors de l'appel à getUsermedi
a pour spécifier les types de pistes à inclure dans le MediaStream renvoyé
 et, éventuellement, pour établir des contraintes pour les paramètres de
 ces pistes
\begin_inset CommandInset citation
LatexCommand cite
key "mozilla-org-2021C"
literal "false"

\end_inset

.
\end_layout

\begin_layout Standard
L’implémentation minimale requise par l’interface MediaStreamConstraints
 est la suivante: 
\begin_inset listings
lstparams "style=ES6"
inline true
status open

\begin_layout Plain Layout

{ video: true, audio: true }
\end_layout

\end_inset

.
 Cette dernière, indique que nous voulons que le flux généré comporte une
 voix et une vidéo en utilisant les configurations de contraintes et paramètres
 par défaut.
\end_layout

\begin_layout Standard
Capturer les médias à partir des périphéques médias, dans le navigateur,
 en utilisant les configurations de contraintes et paramètres par défaut
 consiste à écrire les lignes de code suivantes.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "style=ES6"
inline false
status open

\begin_layout Plain Layout

const constraints: MediaStreamConstraint = { audio: true, video: true };
\end_layout

\begin_layout Plain Layout

navigator.mediaDevices.getUserMedia(constraints);
\end_layout

\end_inset


\end_layout

\end_body
\end_document
