#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass report
\begin_preamble
%           Liste des packages         %

% Faux texte, juste pour la démo
\usepackage{blindtext}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Réglage des fontes et typo    
\usepackage[utf8]{inputenc}		% LaTeX, comprend les accents !
\usepackage[T1]{fontenc}
\usepackage{float}
\usepackage{graphicx}

%\usepackage[square,sort&compress,sectionbib]{natbib}		% Doit être chargé avant babel
\usepackage[numbers]{natbib}
\usepackage{chapterbib}
	%\renewcommand{\bibsection}{\section{Références}}		% Met les références biblio dans un \section (au lieu de \section*)
		
\usepackage[frenchb]{babel}
\usepackage{lmodern}
\usepackage{ae,aecompl}						% Utilisation des fontes vectorielles modernes
\usepackage[upright]{fourier}



% Apparence globale      
\usepackage[top=2cm, bottom=2cm, left=2.5cm, right=2cm, headheight=15pt]{geometry} 
\usepackage{fancyhdr}			% Entête et pieds de page
	\pagestyle{fancy}			% Indique que le style de la page sera justement fancy
	\lfoot[\thepage]{} %gauche du pied de page
	\cfoot{} %milieu du pied de page
	\rfoot[]{\thepage} %droite du pied de page
	\fancyhead[RO, LE] {}	
\usepackage{enumerate}
\usepackage{enumitem}
\usepackage[section]{placeins}	% Place un FloatBarrier à chaque nouvelle section
\makeatletter% même chose pour les \subsection que le package ne gère pas
\renewcommand\subsection{\FloatBarrier\@startsection{subsection}{2}{\z@}
{-3.25ex\@plus -1ex \@minus -.2ex}
{1.5ex \@plus .2ex}{\normalfont\large\bfseries}}
\makeatother
\usepackage{epigraph}
\usepackage[font={small}]{caption}
\usepackage[francais]{minitoc}		% Mini table des matières, en français
	\setcounter{minitocdepth}{2}	% Mini-toc détaillées (sections/sous-sections)
\usepackage{pdflscape}				% Permet d'utiliser des pages au format paysage

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Maths                         
\usepackage{amsmath}			% Permet de taper des formules mathématiques
\usepackage{amssymb}			% Permet d'utiliser des symboles mathématiques
\usepackage{amsfonts}			% Permet d'utiliser des polices mathématiques
\usepackage{nicefrac}
\usepackage{upgreek}			% For roman (i.e. upright) lowercase Greek characters

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%Profondeur titre

\renewcommand\theparagraph{\alph{paragraph})}
\setcounter{secnumdepth}{4}
\setcounter{tocdepth}{4}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%% Tableaux
\usepackage{multirow}
\usepackage{booktabs}
\usepackage{colortbl}
\usepackage{tabularx}
\usepackage{multirow}
\usepackage{threeparttable}
\usepackage{etoolbox}
	\appto\TPTnoteSettings{\footnotesize}
\addto\captionsfrench{\def\tablename{{\textsc{Tableau}}}}	% Renome 'table' en 'tableau'

            
            

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Graphiques                    
\usepackage{graphicx}			% Permet l'inclusion d'images
\usepackage{subcaption}
\usepackage{pdfpages}
\usepackage{rotating}
\usepackage{pgfplots}
	\usepgfplotslibrary{groupplots}
\usepackage{tikz}
	\usetikzlibrary{backgrounds,automata}
	\pgfplotsset{width=7cm,compat=1.3}
	\tikzset{every picture/.style={execute at begin picture={
   		\shorthandoff{:;!?};}
	}}
	\pgfplotsset{every linear axis/.append style={
		/pgf/number format/.cd,
		use comma,
		1000 sep={\,},
	}}
\usepackage{eso-pic}
\usepackage{import}
\usepackage{cclicenses}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Biblio                        
\makeatletter
\patchcmd{\BR@backref}{\newblock}{\newblock(page~}{}{}	% Pour les back-references, affiche 'page' au lieu de 'p.'
\patchcmd{\BR@backref}{\par}{)\par}{}{}
\makeatother
	
	
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Navigation dans le document   
\usepackage[pdftex,pdfborder={0 0 0},
			colorlinks=true,
			linkcolor=black,
			citecolor=black,
			pagebackref=false,
			]{hyperref} %Créera automatiquement les liens internes au PDF


% Mise en forme du texte        
\usepackage{xspace}
\usepackage[load-configurations = abbreviations]{siunitx}
	\DeclareSIUnit{\MPa}{\mega\pascal}
	\DeclareSIUnit{\micron}{\micro\meter}
	\DeclareSIUnit{\tr}{tr}
	\DeclareSIPostPower\totheM{m}
	\sisetup{
	locale = FR,
	  inter-unit-separator=$\cdot$,
	  range-phrase=~\`{a}~,     	% Utilise le tiret court pour dire "de... à"
	  range-units=single,  			% Cache l'unité sur la première borne
	  }
\usepackage{chemist}
\usepackage[version=3]{mhchem}
\usepackage{textcomp}
\usepackage{numprint}
\usepackage{array}
% \usepackage[acronym,xindy,toc]{glossaries}
% 	\newglossary[nlg]{notation}{not}{ntn}{Notation} 	% Création d'un type de glossaire 'notation'
% 	\makeglossaries
% 	\loadglsentries{Glossaire}	% Utilisation d'un fichier externe pour la définition des entrées (Glossaire.tex)
% \usepackage{hyphenat}


% Compilation

\usepackage{silence}
%
%% Virer les erreur dues à minitoc
\WarningFilter{minitoc(hints)}{W0023}
\WarningFilter{minitoc(hints)}{W0024}
\WarningFilter{minitoc(hints)}{W0028}
\WarningFilter{minitoc(hints)}{W0030}

 

%           Page de garde              %
\makeatletter
\def\@ecole{}
\newcommand{\ecole}[1]{
  \def\@ecole{#1}
}

\def\@specialite{}
\newcommand{\specialite}[1]{
  \def\@specialite{#1}
}

\def\@departement{}
\newcommand{\departement}[1]{
  \def\@departement{#1}
}

\def\@typeRapport{}
\newcommand{\typeRapport}[1]{
  \def\@typeRapport{#1}
}

\def\@anneeUniversitaire{}
\newcommand{\anneeUniversitaire}[1]{
  \def\@anneeUniversitaire{#1}
}

\def\@nomPromo{}
\newcommand{\nomPromo}[1]{
  \def\@nomPromo{#1}
}

\def\@encadreura{}
\newcommand{\encadreura}[1]{
  \def\@encadreura{#1}
}

\def\@encadreurb{}
\newcommand{\encadreurb}[1]{
  \def\@encadreurb{#1}
}

\def\@encadreurc{}
\newcommand{\encadreurc}[1]{
  \def\@encadreurc{#1}
}

\def\@jurya{}{}{}
\newcommand{\jurya}[3]{
  \def\@jurya{#1	& #2	& #3\\}
}
\def\@juryb{}{}{}
\newcommand{\juryb}[3]{
  \def\@juryb{#1,	& #2	& #3\\}
}
\def\@juryc{}{}{}
\newcommand{\juryc}[3]{
  \def\@juryc{#1,	& #2	& #3\\}
}
\def\@juryd{}{}{}
\newcommand{\juryd}[3]{
  \def\@juryd{#1,	& #2	& #3\\}
}
\def\@jurye{}{}{}
\newcommand{\jurye}[3]{
  \def\@jurye{#1,	& #2	& #3\\}
}
\def\@juryf{}{}{}
\newcommand{\juryf}[3]{
  \def\@juryf{#1,	& #2	& #3\\}
}
\def\@juryg{}{}{}
\newcommand{\juryg}[3]{
  \def\@juryg{#1,	& #2	& #3\\}
}
\def\@juryh{}{}{}
\newcommand{\juryh}[3]{
  \def\@juryh{#1,	& #2	& #3\\}
}
\def\@juryi{}{}{}
\newcommand{\juryi}[3]{
  \def\@juryi{#1,	& #2	& #3\\}
}

\makeatother

\makeatletter

\makeatother
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language french
\language_package babel
\inputencoding utf8
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style french
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
Configuration des Interfaces WebRTC
\end_layout

\begin_layout Standard
\paragraph_spacing onehalf
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
minitoc
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
\paragraph_spacing double
WebRTC offre des opportunités sans précédent aux développeurs qui souhaitent
 intégrer des communications en temps réel dans leurs applications.
 Les API WebRTC getUserMedia, RTCPeerConnection et RTCDataChannel jouent
 chacune leur propre rôle dans la capture, la transmission et la diffusion
 de données en temps réel (depuis la webcam et le microphone d'un ordinateur)
 vers un autre navigateur, sans qu'un utilisateur ait à télécharger des
 plug-ins ou des modules complémentaires.
\begin_inset CommandInset citation
LatexCommand cite
key "onsip-2021"
literal "false"

\end_inset


\end_layout

\begin_layout Section
RTCPeerConnection
\end_layout

\begin_layout Standard
\paragraph_spacing double
L'API RTCPeerConnection est chargé de connecter deux (02) navigateurs ensemble
 afin qu'ils puissent partager des médias en temps réel.
\begin_inset CommandInset citation
LatexCommand cite
key "onsip-2021"
literal "false"

\end_inset

 Elle est au cœur de la connexion peer-to-peer entre chacun des navigateurs.
\end_layout

\begin_layout Subsection
Configuration et initialisation
\end_layout

\begin_layout Subsubsection
RTCConfiguration
\end_layout

\begin_layout Standard
\paragraph_spacing double
Chaque connexion peer est gérée par un objet RTCPeerConnection.
 Le constructeur de cette classe prend un seul objet RTCConfiguration comme
 paramètre.
 Cet objet définit la configuration de la connexion peer et doit contenir
 des informations sur les serveurs ICE à utiliser
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
\paragraph_spacing onehalf
Le dictionnaire complet des membres de RTCConfiguration peut être accédée
 à l'addresse https://developer.mozilla.org/en-US/docs/Web/API/RTCConfiguration
\end_layout

\end_inset

.
\begin_inset CommandInset citation
LatexCommand cite
key "webrtc-org-2014"
literal "false"

\end_inset


\end_layout

\begin_layout Standard
\paragraph_spacing double
L’établissement de connectivité interactive (ICE) étant une technique utilisée
 dans les réseaux informatiques pour trouver des moyens pour que deux ordinateur
s communiquent aussi directement que possible dans les réseaux peer-to-peer.
 Il est le plus souvent utilisé pour les médias interactifs tels que la
 voix sur IP (VoIP), les communications peer-to-peer, la vidéo et la messagerie
 instantanée.
 Dans de telles applications, mieux vaut éviter de communiquer via un serveur
 central (ce qui ralentirait la communication et serait coûteux), mais la
 communication directe entre les applications clientes sur Internet est
 très délicate en raison des traducteurs d'adresses réseau (NAT), des pare-feu
 et d'autres barrières du réseau.
\begin_inset CommandInset citation
LatexCommand cite
key "wikipedia-contributors-2020"
literal "false"

\end_inset


\end_layout

\begin_layout Subsubsection
Initialisation
\end_layout

\begin_layout Standard
\paragraph_spacing double
Le bout de code suivant tiré de 
\begin_inset CommandInset citation
LatexCommand cite
key "webrtc-org-2014"
literal "false"

\end_inset

 montre comment initialiser l'API RTCPeerConnection, avec un objet RTCConfigurat
ion.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "style=ES6"
inline false
status open

\begin_layout Plain Layout

const configuration: RTCConfiguration = {
\end_layout

\begin_layout Plain Layout

  iceServers: [{'urls': 'stun:stun.l.google.com:19302'}],
\end_layout

\begin_layout Plain Layout

};
\end_layout

\begin_layout Plain Layout

const peerConnection = new RTCPeerConnection(configuration);
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
RTCSessionDescription
\end_layout

\begin_layout Standard
\paragraph_spacing double
RTCPeerConnection coordonne l'échange de métadonnées cruciales entre deux
 navigateurs.
 Ces données définissent le numéro IP et l'adresse de port publiquement
 identifiables d'un navigateur afin que les médias en temps réel puissent
 être échangés.
\end_layout

\begin_layout Standard
\paragraph_spacing double
Pour que deux points de terminaison WebRTC commencent à se parler, trois
 types d'informations doivent être relayées:
\end_layout

\begin_layout Enumerate
\paragraph_spacing double
Les informations de contrôle de session déterminent quand initialiser, fermer
 et modifier les sessions de communication.
\end_layout

\begin_layout Enumerate
\paragraph_spacing double
Les données réseau relayent l'adresse IP et le numéro de port de chaque
 point de terminaison afin que les appelants puissent trouver les personnes
 appelées.
\end_layout

\begin_layout Enumerate
\paragraph_spacing double
Les données média concernent les codecs et les types de média que les appelants
 ont en commun.
\end_layout

\begin_layout Standard
\paragraph_spacing double
Ces informations seront encapsulées dans un objet RTCSessionDescription.
\end_layout

\begin_layout Standard
\paragraph_spacing double
L'interface RTCSessionDescription décrit une extrémité d'une connexion (ou
 connexion potentielle) et comment elle est configurée.
 Chaque objet RTCSessionDescription consiste en un type de description indiquant
 quelle partie du processus de négociation il décrit (offre ou réponse)
 et du descripteur SDP de la session.
\begin_inset CommandInset citation
LatexCommand cite
key "mozilla-org-2021"
literal "false"

\end_inset


\end_layout

\begin_layout Standard
\paragraph_spacing double
Le processus de négociation d'une connexion entre deux peers implique l'échange
 d'objets RTCSessionDescription dans les deux sens, par le biais du canal
 de signalisation
\begin_inset CommandInset ref
LatexCommand eqref
reference "subsec:Signalisation-et-négotiation"
plural "false"
caps "false"
noprefix "false"

\end_inset

, chaque description suggérant une combinaison d'options de configuration
 de connexion que l'expéditeur de la description prend en charge.
 Une fois que les deux pairs se sont mis d'accord sur une configuration
 pour la connexion, la négociation est terminée.
\begin_inset CommandInset citation
LatexCommand cite
key "mozilla-org-2021"
literal "false"

\end_inset


\end_layout

\begin_layout Subsubsection
Signalisation
\end_layout

\begin_layout Standard
\paragraph_spacing double
La spécification WebRTC inclut des API pour communiquer avec un serveur
 ICE , mais le composant de signalisation n'en fait pas partie
\begin_inset CommandInset ref
LatexCommand eqref
reference "subsec:Pourquoi-la-signalisation"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 La signalisation est nécessaire pour que deux pairs partagent la façon
 dont ils doivent se connecter.
 Habituellement, cela est résolu via une API Web standard basée sur HTTP
 (c'est-à-dire un service REST ou un autre mécanisme RPC) où les applications
 Web peuvent relayer les informations nécessaires avant que la connexion
 entre homologues ne soit lancée.
\begin_inset CommandInset citation
LatexCommand cite
key "webrtc-org-2014"
literal "false"

\end_inset


\end_layout

\begin_layout Standard
\paragraph_spacing double
L'extrait de code provenant de 
\begin_inset CommandInset citation
LatexCommand cite
key "webrtc-org-2014"
literal "false"

\end_inset

 suivant, montre comment un service de signalisation fictif peut être utilisé
 pour envoyer et recevoir des messages de manière asynchrone.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "style=ES6"
inline false
status open

\begin_layout Plain Layout

// Configurer un canal de communication asynchrone qui
\end_layout

\begin_layout Plain Layout

// sera utilisé lors de la configuration de la connexion peer
\end_layout

\begin_layout Plain Layout

const signalingChannel = new SignalingChannel(remoteClientId);
\end_layout

\begin_layout Plain Layout

signalingChannel.addEventListener('message', message => {
\end_layout

\begin_layout Plain Layout

  // Nouveau message du client distant reçu
\end_layout

\begin_layout Plain Layout

});
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// Envoyer un message asynchrone au client distant
\end_layout

\begin_layout Plain Layout

signalingChannel.send('Hello!');
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Initiation de la description de session
\end_layout

\begin_layout Standard
\paragraph_spacing double
Voici comment une desscription de session sera effectuée puis envoyée de
 la part du client local qui à la tâche d'initier la communication, sans
 oublier comment ce même client négociera une potentielle réponse de son
 correspondant.
\begin_inset CommandInset citation
LatexCommand cite
key "webrtc-org-2014"
literal "false"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "style=ES6"
inline false
status open

\begin_layout Plain Layout

// Écouter la récéption d'un message sur le canal de signalisation
\end_layout

\begin_layout Plain Layout

signalingChannel.addEventListener('message', async message => {
\end_layout

\begin_layout Plain Layout

  if (message.answer) { // Si le message comporte une réponse
\end_layout

\begin_layout Plain Layout

    // Créer une déscription de session associée à la réponse
\end_layout

\begin_layout Plain Layout

    const remoteDesc = new RTCSessionDescription(message.answer);
\end_layout

\begin_layout Plain Layout

    await peerConnection.setRemoteDescription(remoteDesc);
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

});
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// Créer une description de session associée à l'offre
\end_layout

\begin_layout Plain Layout

const offer = await peerConnection.createOffer();
\end_layout

\begin_layout Plain Layout

await peerConnection.setLocalDescription(offer);
\end_layout

\begin_layout Plain Layout

// Puis envoyer cette offre au client distant
\end_layout

\begin_layout Plain Layout

signalingChannel.send({'offer': offer});
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\paragraph_spacing double
Et ci-après comment, du côté d'un client distant auquel sera demandé une
 communication, négociera une offre qui lui aboutit et créera une description
 de session (réponse).
\begin_inset CommandInset citation
LatexCommand cite
key "webrtc-org-2014"
literal "false"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

// Écouter la récéption d'un message sur le canal de signalisation
\end_layout

\begin_layout Plain Layout

signalingChannel.addEventListener('message', async message => {
\end_layout

\begin_layout Plain Layout

  if (message.offer) { // Si le message contient une offre
\end_layout

\begin_layout Plain Layout

	// Créer une description de session associée à l'offre
\end_layout

\begin_layout Plain Layout

    const remoteDesc = new RTCSessionDescription(message.offer);
\end_layout

\begin_layout Plain Layout

    peerConnection.setRemoteDescription(remoteDesc);
\end_layout

\begin_layout Plain Layout

    // Puis créer une descri
\end_layout

\begin_layout Plain Layout

    const answer = await peerConnection.createAnswer();
\end_layout

\begin_layout Plain Layout

    await peerConnection.setLocalDescription(answer);
\end_layout

\begin_layout Plain Layout

    signalingChannel.send({'answer': answer});
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

}); 
\end_layout

\end_inset


\end_layout

\end_body
\end_document
