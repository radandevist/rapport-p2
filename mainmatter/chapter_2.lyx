#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass report
\begin_preamble
%           Liste des packages         %

% Faux texte, juste pour la démo
\usepackage{blindtext}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Réglage des fontes et typo    
\usepackage[utf8]{inputenc}		% LaTeX, comprend les accents !
\usepackage[T1]{fontenc}
\usepackage{float}
\usepackage{graphicx}

%\usepackage[square,sort&compress,sectionbib]{natbib}		% Doit être chargé avant babel
\usepackage[numbers]{natbib}
\usepackage{chapterbib}
	%\renewcommand{\bibsection}{\section{Références}}		% Met les références biblio dans un \section (au lieu de \section*)
		
\usepackage[frenchb]{babel}
\usepackage{lmodern}
\usepackage{ae,aecompl}						% Utilisation des fontes vectorielles modernes
\usepackage[upright]{fourier}



% Apparence globale      
\usepackage[top=2cm, bottom=2cm, left=2.5cm, right=2cm, headheight=15pt]{geometry} 
\usepackage{fancyhdr}			% Entête et pieds de page
	\pagestyle{fancy}			% Indique que le style de la page sera justement fancy
	\lfoot[\thepage]{} %gauche du pied de page
	\cfoot{} %milieu du pied de page
	\rfoot[]{\thepage} %droite du pied de page
	\fancyhead[RO, LE] {}	
\usepackage{enumerate}
\usepackage{enumitem}
\usepackage[section]{placeins}	% Place un FloatBarrier à chaque nouvelle section
\makeatletter% même chose pour les \subsection que le package ne gère pas
\renewcommand\subsection{\FloatBarrier\@startsection{subsection}{2}{\z@}
{-3.25ex\@plus -1ex \@minus -.2ex}
{1.5ex \@plus .2ex}{\normalfont\large\bfseries}}
\makeatother
\usepackage{epigraph}
\usepackage[font={small}]{caption}
\usepackage[francais]{minitoc}		% Mini table des matières, en français
	\setcounter{minitocdepth}{2}	% Mini-toc détaillées (sections/sous-sections)
\usepackage{pdflscape}				% Permet d'utiliser des pages au format paysage

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Maths                         
\usepackage{amsmath}			% Permet de taper des formules mathématiques
\usepackage{amssymb}			% Permet d'utiliser des symboles mathématiques
\usepackage{amsfonts}			% Permet d'utiliser des polices mathématiques
\usepackage{nicefrac}
\usepackage{upgreek}			% For roman (i.e. upright) lowercase Greek characters

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%Profondeur titre

\renewcommand\theparagraph{\alph{paragraph})}
\setcounter{secnumdepth}{4}
\setcounter{tocdepth}{4}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%% Tableaux
\usepackage{multirow}
\usepackage{booktabs}
\usepackage{colortbl}
\usepackage{tabularx}
\usepackage{multirow}
\usepackage{threeparttable}
\usepackage{etoolbox}
	\appto\TPTnoteSettings{\footnotesize}
\addto\captionsfrench{\def\tablename{{\textsc{Tableau}}}}	% Renome 'table' en 'tableau'

            
            

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Graphiques                    
\usepackage{graphicx}			% Permet l'inclusion d'images
\usepackage{subcaption}
\usepackage{pdfpages}
\usepackage{rotating}
\usepackage{pgfplots}
	\usepgfplotslibrary{groupplots}
\usepackage{tikz}
	\usetikzlibrary{backgrounds,automata}
	\pgfplotsset{width=7cm,compat=1.3}
	\tikzset{every picture/.style={execute at begin picture={
   		\shorthandoff{:;!?};}
	}}
	\pgfplotsset{every linear axis/.append style={
		/pgf/number format/.cd,
		use comma,
		1000 sep={\,},
	}}
\usepackage{eso-pic}
\usepackage{import}
\usepackage{cclicenses}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Biblio                        
\makeatletter
\patchcmd{\BR@backref}{\newblock}{\newblock(page~}{}{}	% Pour les back-references, affiche 'page' au lieu de 'p.'
\patchcmd{\BR@backref}{\par}{)\par}{}{}
\makeatother
	
	
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Navigation dans le document   
\usepackage[pdftex,pdfborder={0 0 0},
			colorlinks=true,
			linkcolor=black,
			citecolor=black,
			pagebackref=false,
			]{hyperref} %Créera automatiquement les liens internes au PDF


% Mise en forme du texte        
\usepackage{xspace}
\usepackage[load-configurations = abbreviations]{siunitx}
	\DeclareSIUnit{\MPa}{\mega\pascal}
	\DeclareSIUnit{\micron}{\micro\meter}
	\DeclareSIUnit{\tr}{tr}
	\DeclareSIPostPower\totheM{m}
	\sisetup{
	locale = FR,
	  inter-unit-separator=$\cdot$,
	  range-phrase=~\`{a}~,     	% Utilise le tiret court pour dire "de... à"
	  range-units=single,  			% Cache l'unité sur la première borne
	  }
\usepackage{chemist}
\usepackage[version=3]{mhchem}
\usepackage{textcomp}
\usepackage{numprint}
\usepackage{array}
% \usepackage[acronym,xindy,toc]{glossaries}
% 	\newglossary[nlg]{notation}{not}{ntn}{Notation} 	% Création d'un type de glossaire 'notation'
% 	\makeglossaries
% 	\loadglsentries{Glossaire}	% Utilisation d'un fichier externe pour la définition des entrées (Glossaire.tex)
% \usepackage{hyphenat}


% Compilation

\usepackage{silence}
%
%% Virer les erreur dues à minitoc
\WarningFilter{minitoc(hints)}{W0023}
\WarningFilter{minitoc(hints)}{W0024}
\WarningFilter{minitoc(hints)}{W0028}
\WarningFilter{minitoc(hints)}{W0030}

 

%           Page de garde              %
\makeatletter
\def\@ecole{}
\newcommand{\ecole}[1]{
  \def\@ecole{#1}
}

\def\@specialite{}
\newcommand{\specialite}[1]{
  \def\@specialite{#1}
}

\def\@departement{}
\newcommand{\departement}[1]{
  \def\@departement{#1}
}

\def\@typeRapport{}
\newcommand{\typeRapport}[1]{
  \def\@typeRapport{#1}
}

\def\@anneeUniversitaire{}
\newcommand{\anneeUniversitaire}[1]{
  \def\@anneeUniversitaire{#1}
}

\def\@nomPromo{}
\newcommand{\nomPromo}[1]{
  \def\@nomPromo{#1}
}

\def\@encadreura{}
\newcommand{\encadreura}[1]{
  \def\@encadreura{#1}
}

\def\@encadreurb{}
\newcommand{\encadreurb}[1]{
  \def\@encadreurb{#1}
}

\def\@encadreurc{}
\newcommand{\encadreurc}[1]{
  \def\@encadreurc{#1}
}

\def\@jurya{}{}{}
\newcommand{\jurya}[3]{
  \def\@jurya{#1	& #2	& #3\\}
}
\def\@juryb{}{}{}
\newcommand{\juryb}[3]{
  \def\@juryb{#1,	& #2	& #3\\}
}
\def\@juryc{}{}{}
\newcommand{\juryc}[3]{
  \def\@juryc{#1,	& #2	& #3\\}
}
\def\@juryd{}{}{}
\newcommand{\juryd}[3]{
  \def\@juryd{#1,	& #2	& #3\\}
}
\def\@jurye{}{}{}
\newcommand{\jurye}[3]{
  \def\@jurye{#1,	& #2	& #3\\}
}
\def\@juryf{}{}{}
\newcommand{\juryf}[3]{
  \def\@juryf{#1,	& #2	& #3\\}
}
\def\@juryg{}{}{}
\newcommand{\juryg}[3]{
  \def\@juryg{#1,	& #2	& #3\\}
}
\def\@juryh{}{}{}
\newcommand{\juryh}[3]{
  \def\@juryh{#1,	& #2	& #3\\}
}
\def\@juryi{}{}{}
\newcommand{\juryi}[3]{
  \def\@juryi{#1,	& #2	& #3\\}
}

\makeatother

\makeatletter

\makeatother
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language french
\language_package babel
\inputencoding utf8
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing onehalf
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation 0bp
\is_math_indent 0
\math_numbering_side default
\quotes_style french
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
Configuration des Interfaces WebRTC
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
minitoc
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
\paragraph_spacing other 1.5
WebRTC offre des opportunités sans précédent aux développeurs qui souhaitent
 intégrer des communications en temps réel dans leurs applications.
\end_layout

\begin_layout Standard
\paragraph_spacing other 1.5
Les API WebRTC getUserMedia, RTCPeerConnection et RTCDataChannel jouent
 chacune leur propre rôle dans la capture, la transmission et la diffusion
 de données en temps réel (depuis la webcam et le microphone d'un ordinateur)
 vers un autre navigateur, sans qu'un utilisateur ait à télécharger des
 plug-ins ou des modules complémentaires
\begin_inset CommandInset citation
LatexCommand cite
key "onsip-2021"
literal "false"

\end_inset

.
\end_layout

\begin_layout Section
Signalisation
\begin_inset CommandInset label
LatexCommand label
name "sec:Signalisation"

\end_inset


\end_layout

\begin_layout Standard
\paragraph_spacing other 1.5
Avant toute vérification de connectivité ou négociation de session, nous
 devons savoir si l'autre pair est joignable et s'il est prêt à établir
 la connexion.
 Nous devons envoyer une offre, et le pair doit retourner une réponse (figure
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Canal-de-signalisation"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
 Cependant, nous avons maintenant un dilemme: si l'autre pair n'écoute pas
 les paquets entrants, comment le notifier de notre intention? Au minimum,
 nous avons besoin d'un canal de signalisation partagé
\begin_inset CommandInset citation
LatexCommand cite
after "p. 320"
key "grigorik-2013"
literal "false"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename /home/radan/Projects/projet2-espa/Book/rapport-p2/images/shared signaling channel.png
	scale 40

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Canal de signalisation partagé
\begin_inset CommandInset label
LatexCommand label
name "fig:Canal-de-signalisation"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\paragraph_spacing other 1.5
WebRTC reporte le choix du transport et du protocole de signalisation à
 l'application; la norme ne fournit intentionnellement aucune recommandation
 ou mise en œuvre pour la pile de signalisation.
 Pourquoi? Cela permet l'interopérabilité avec une variété d'autres protocoles
 de signalisation alimentant l'infrastructure de communications existantes
\begin_inset CommandInset citation
LatexCommand cite
after "p. 320"
key "grigorik-2013"
literal "false"

\end_inset

.
\end_layout

\begin_layout Standard
\paragraph_spacing other 1.5
Le serveur de signalisation peut jouer le rôle de passerelle vers un réseau
 de communication existant, auquel cas il appartient au réseau de notifier
 au pair cible une offre de connexion puis de renvoyer la réponse au client
 WebRTC initiant l'échange.
 Alternativement, l'application peut également utiliser son propre canal
 de signalisation personnalisé, qui peut consister en un ou plusieurs serveurs
 et un protocole personnalisé pour communiquer les messages: si les deux
 pairs sont connectés au même service de signalisation, alors le service
 peut transférer les messages entre eux
\begin_inset CommandInset citation
LatexCommand cite
after "p. 321"
key "grigorik-2013"
literal "false"

\end_inset

.
\end_layout

\begin_layout Standard
\paragraph_spacing other 1.5
L'extrait de code provenant de 
\begin_inset CommandInset citation
LatexCommand cite
key "webrtc-org-2014"
literal "false"

\end_inset

 suivant, montre comment un service de signalisation fictif peut être utilisé
 pour envoyer et recevoir des messages de manière asynchrone.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "style=ES6"
inline false
status open

\begin_layout Plain Layout

// Configurer un canal de communication asynchrone qui
\end_layout

\begin_layout Plain Layout

// sera utilisé lors de la configuration de la connexion peer
\end_layout

\begin_layout Plain Layout

const signalingChannel = new SignalingChannel(remoteClientId);
\end_layout

\begin_layout Plain Layout

signalingChannel.addEventListener('message', message => {
\end_layout

\begin_layout Plain Layout

  // Nouveau message du client distant reçu
\end_layout

\begin_layout Plain Layout

});
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// Envoyer un message asynchrone au client distant
\end_layout

\begin_layout Plain Layout

signalingChannel.send('Hello!');
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Mise en place d'un canal de siganlisation fictif
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
RTCPeerConnection
\end_layout

\begin_layout Standard
\paragraph_spacing other 1.5
Malgré les nombreux protocoles impliqués dans la configuration et le maintien
 d'une connexion peer-to-peer, l'API exposée par le navigateur est relativement
 simple.
 L'interface RTCPeerConnection (figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:API-RTCPeerConnection"
plural "false"
caps "false"
noprefix "false"

\end_inset

) est responsable de la gestion du cycle de vie complet de chaque connexion
 peer-to-peer
\begin_inset CommandInset citation
LatexCommand cite
after " p. 317"
key "grigorik-2013"
literal "false"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename /home/radan/Projects/projet2-espa/Book/rapport-p2/images/RTCPEERConnection API.png
	scale 40

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
API RTCPeerConnection
\begin_inset CommandInset label
LatexCommand label
name "fig:API-RTCPeerConnection"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

 
\backslash
vspace*{-0.5 cm}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
\paragraph_spacing other 1.5
\noindent
RTCPeerConnection gère le flux de travail ICE complet pour la traversée
 NAT.
\end_layout

\begin_layout Itemize
\paragraph_spacing other 1.5
\noindent
RTCPeerConnection envoie des keepalives automatiques (STUN) entre pairs.
\end_layout

\begin_layout Itemize
\paragraph_spacing other 1.5
\noindent
RTCPeerConnection assure le suivi des flux locaux.
 
\end_layout

\begin_layout Itemize
\paragraph_spacing other 1.5
\noindent
RTCPeerConnection assure le suivi des flux distants.
\end_layout

\begin_layout Itemize
\paragraph_spacing other 1.5
\noindent
RTCPeerConnection déclenche la renégociation automatique du flux si nécessaire.
\end_layout

\begin_layout Itemize
\paragraph_spacing other 1.5
\noindent
RTCPeerConnection fournit les API nécessaires pour générer l'offre de connexion,
 accepter la réponse, nous permet d'interroger la connexion pour son état
 actuel, et plus encore
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

 
\backslash
vspace*{-0.8 cm}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\paragraph_spacing other 1.5
En bref, RTCPeerConnection encapsule toute la configuration, la gestion
 et l'état de la connexion dans une seule interface.
\end_layout

\begin_layout Subsection
RTCConfiguration
\begin_inset CommandInset label
LatexCommand label
name "subsec:RTCConfiguration"

\end_inset


\end_layout

\begin_layout Standard
\paragraph_spacing other 1.5
Chaque connexion peer-to-peer est gérée par un objet RTCPeerConnection.
 Le constructeur de cette classe prend un seul objet RTCConfiguration comme
 paramètre.
 Cet objet définit la configuration de la connexion peer-to-peer et doit
 contenir des informations sur les serveurs ICE à utiliser
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Le dictionnaire complet des membres de RTCConfiguration peut être accédée
 à l'addresse https://developer.mozilla.org/en-US/docs/Web/API/RTCConfiguration
\end_layout

\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "webrtc-org-2014"
literal "false"

\end_inset

.
\end_layout

\begin_layout Standard
\paragraph_spacing other 1.5
L’établissement de connectivité interactive (ICE) est une technique utilisée
 dans les réseaux informatiques pour trouver des moyens pour que deux ordinateur
s communiquent aussi directement que possible dans les réseaux peer-to-peer.
 Il est le plus souvent utilisé pour les médias interactifs tels que la
 voix sur IP (VoIP
\begin_inset CommandInset nomenclature
LatexCommand nomenclature
symbol "VoIP"
description "Voice over Internet Protocol"
literal "false"

\end_inset

), les communications peer-to-peer, la vidéo et la messagerie instantanée.
 Dans de telles applications, mieux vaut éviter de communiquer via un serveur
 central (ce qui ralentirait la communication et serait coûteux), mais la
 communication directe entre les applications clientes sur Internet est
 très délicate en raison des traducteurs d'adresses réseau (NAT
\begin_inset CommandInset nomenclature
LatexCommand nomenclature
symbol "NAT"
description "Network Address Translation"
literal "false"

\end_inset

), des pare-feu et d'autres barrières du réseau
\begin_inset CommandInset citation
LatexCommand cite
key "wikipedia-contributors-2020"
literal "false"

\end_inset

.
\end_layout

\begin_layout Subsection
Initialisation
\end_layout

\begin_layout Standard
\paragraph_spacing other 1.5
Une fois la configuration effectuée il suffit d'instancier l'interface de
 l'API RTCPeerConnection afin d'initialiser une connexion et ce sans oublier
 de fournir l'argument configuration dans la signature du constructeur.
 Le bout de code suivant, tiré de 
\begin_inset CommandInset citation
LatexCommand cite
key "webrtc-org-2014"
literal "false"

\end_inset

 montre comment effectuer celà.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "style=ES6"
inline false
status open

\begin_layout Plain Layout

const configuration: RTCConfiguration = {
\end_layout

\begin_layout Plain Layout

  iceServers: [{'urls': 'stun:stun.l.google.com:19302'}],
\end_layout

\begin_layout Plain Layout

};
\end_layout

\begin_layout Plain Layout

const peerConnection = new RTCPeerConnection(configuration);
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Initialisation de RTCPeerConnection
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
RTCSessionDescription
\begin_inset CommandInset label
LatexCommand label
name "subsec:RTCSessionDescription"

\end_inset


\end_layout

\begin_layout Standard
\paragraph_spacing other 1.5
RTCPeerConnection coordonne l'échange de métadonnées cruciales entre deux
 navigateurs.
 Ces données définissent l'adresse IP et le numéro de ports publiquement
 identifiables d'un navigateur afin que les médias en temps réel puissent
 être échangés.
\end_layout

\begin_layout Standard
\paragraph_spacing other 1.5
Pour que deux points de terminaison WebRTC commencent à se parler, trois
 types d'informations doivent être relayés:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vspace*{-0.5 cm}
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
\paragraph_spacing other 1.5
\noindent
Les informations de contrôle de session déterminent quand initialiser, fermer
 et modifier les sessions de communication.
\end_layout

\begin_layout Enumerate
\paragraph_spacing other 1.5
\noindent
Les données réseau relayent l'adresse IP et le numéro de port de chaque
 point de terminaison afin que les appelants puissent trouver les personnes
 appelées.
\end_layout

\begin_layout Enumerate
\paragraph_spacing other 1.5
\noindent
Les données média concernent les codecs et les types de médias que les appelants
 ont en commun.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vspace*{-0.8 cm}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\paragraph_spacing other 1.5
Ces informations seront encapsulées dans un objet RTCSessionDescription.
\end_layout

\begin_layout Standard
\paragraph_spacing other 1.5
L'interface RTCSessionDescription décrit une extrémité d'une connexion (ou
 connexion potentielle) et comment elle est configurée.
 Chaque objet RTCSessionDescription consiste en un type de description indiquant
 quelle partie du processus de négociation il décrit (offre ou réponse)
 et du descripteur SDP de la session
\begin_inset CommandInset citation
LatexCommand cite
key "mozilla-org-2021"
literal "false"

\end_inset

.
\end_layout

\begin_layout Standard
\paragraph_spacing other 1.5
Le processus de négociation d'une connexion entre deux pairs implique l'échange
 d'objets RTCSessionDescription dans les deux sens, par le biais du canal
 de signalisation
\begin_inset CommandInset ref
LatexCommand eqref
reference "subsec:Signalisation-et-négotiation"
plural "false"
caps "false"
noprefix "false"

\end_inset

, chaque description suggérant une combinaison d'option de configuration
 de connexion que l'expéditeur de la description prend en charge.
 Une fois que les deux pairs se sont mis d'accord sur une configuration
 pour la connexion, la négociation est terminée
\begin_inset CommandInset citation
LatexCommand cite
key "mozilla-org-2021"
literal "false"

\end_inset

.
\end_layout

\begin_layout Subsubsection*
Initialisation, transmission et négotiation
\end_layout

\begin_layout Standard
\paragraph_spacing other 1.5
Voici comment une description de session sera initiée en tant qu'une offre
 puis envoyée de la part du client local vers un client distant, sans oublier
 comment ce même client négociera une potentielle réponse de son correspondant
\begin_inset CommandInset citation
LatexCommand cite
key "webrtc-org-2014"
literal "false"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "style=ES6"
inline false
status open

\begin_layout Plain Layout

// Écouter la récéption d'un message sur le canal de signalisation
\end_layout

\begin_layout Plain Layout

signalingChannel.addEventListener('message', async message => {
\end_layout

\begin_layout Plain Layout

  if (message.answer) { // Si le message comporte une réponse
\end_layout

\begin_layout Plain Layout

    // assigner la réponse en tant que description de session distante
\end_layout

\begin_layout Plain Layout

    const remoteDesc = new RTCSessionDescription(message.answer);
\end_layout

\begin_layout Plain Layout

    await peerConnection.setRemoteDescription(remoteDesc);
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

});
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// Créer une description de session associée à l'offre
\end_layout

\begin_layout Plain Layout

const offer = await peerConnection.createOffer();
\end_layout

\begin_layout Plain Layout

await peerConnection.setLocalDescription(offer);
\end_layout

\begin_layout Plain Layout

// Puis envoyer cette offre au client distant
\end_layout

\begin_layout Plain Layout

signalingChannel.send({'offer': offer});
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Envoi d'une offre et négociation d'une réponse
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\paragraph_spacing other 1.5
Et ci-après, comment du côté d'un client distant auquel sera demandée une
 communication, la négociation d'une offre qui lui aboutit sera faite
\begin_inset CommandInset citation
LatexCommand cite
key "webrtc-org-2014"
literal "false"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "style=ES6"
inline false
status open

\begin_layout Plain Layout

// Écouter la récéption d'un message sur le canal de signalisation
\end_layout

\begin_layout Plain Layout

signalingChannel.addEventListener('message', async message => {
\end_layout

\begin_layout Plain Layout

  if (message.offer) { // Si le message contient une offre
\end_layout

\begin_layout Plain Layout

	// assigner l'offre en tant que description de session distante
\end_layout

\begin_layout Plain Layout

    const remoteDesc = new RTCSessionDescription(message.offer);
\end_layout

\begin_layout Plain Layout

    peerConnection.setRemoteDescription(remoteDesc);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    // Puis créer une description de session associée à la réponse
\end_layout

\begin_layout Plain Layout

    const answer = await peerConnection.createAnswer();
\end_layout

\begin_layout Plain Layout

    await peerConnection.setLocalDescription(answer);
\end_layout

\begin_layout Plain Layout

	
\end_layout

\begin_layout Plain Layout

	// Efin renvoyer cette réponse au client ayant envoyé l'offre
\end_layout

\begin_layout Plain Layout

    signalingChannel.send({'answer': answer});
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

});
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Négociation d'une offre et envoi d'une réponse
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Candidats ICE
\end_layout

\begin_layout Standard
\paragraph_spacing other 1.5
Avant que deux pairs puissent communiquer en utilisant WebRTC, ils doivent
 échanger des informations de connectivité.
 Étant donné que les conditions du réseau peuvent varier en fonction d'un
 grand nombre de facteurs, un service externe est généralement utilisé pour
 découvrir les candidats possibles pour se connecter à un pair.
 Ce service s'appelle ICE et utilise un serveur STUN
\begin_inset CommandInset nomenclature
LatexCommand nomenclature
symbol "STUN"
description "Session Traversal Utilities for NAT"
literal "false"

\end_inset

 ou TURN
\begin_inset CommandInset nomenclature
LatexCommand nomenclature
symbol "TURN"
description "Traversal Using Relay NAT"
literal "false"

\end_inset

.
 STUN signifie «Session Traversal Utitlities for NAT», et est généralement
 utilisé indirectement dans la plupart des applications WebRTC
\begin_inset CommandInset citation
LatexCommand cite
key "webrtc-org-2014"
literal "false"

\end_inset

.
\end_layout

\begin_layout Standard
\paragraph_spacing other 1.5
TURN (Traversal Using Relay NAT) est la solution la plus avancée qui intègre
 les protocoles STUN et la plupart des services commerciaux basés sur WebRTC
 utilsent un serveur TURN pour établir des liens entre pairs.
 L'API WebRTC prend en charge à la fois STUN et TURN directement et il est
 regroupé sous le terme complet «Internet Connectivity Establishment»
\begin_inset CommandInset citation
LatexCommand cite
key "webrtc-org-2014"
literal "false"

\end_inset

.
 Lors de la création d'une connexion WebRTC, nous fournissons généralement
 un ou plusieurs serveurs ICE dans la configuration de RTCPeerConnection
\begin_inset CommandInset ref
LatexCommand eqref
reference "subsec:RTCConfiguration"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Subsubsection*
Provisionnement incrémentiel (ruisselement ICE)
\end_layout

\begin_layout Standard
\paragraph_spacing other 1.5
Une fois qu'un objet RTCPeerConnection est créé, le framework sous-jacent
 utilise les serveurs ICE pour rassembler les candidats à L'établissement
 de la connectivité (candidats ICE).
 L'événement 
\begin_inset listings
lstparams "style=ES6"
inline true
status open

\begin_layout Plain Layout

'icegatheringstatechange'
\end_layout

\end_inset

 de l'API RTCPeerConnection signale à quel état se trouve la collecte ICE
 (
\begin_inset listings
lstparams "basicstyle={\ttfamily},style=ES6"
inline true
status open

\begin_layout Plain Layout

'new'
\end_layout

\end_inset

, 
\begin_inset listings
lstparams "style=ES6"
inline true
status open

\begin_layout Plain Layout

'gathering'
\end_layout

\end_inset

 ou alors 
\begin_inset listings
lstparams "style=ES6"
inline true
status open

\begin_layout Plain Layout

'complete'
\end_layout

\end_inset

)
\begin_inset CommandInset citation
LatexCommand cite
key "webrtc-org-2014"
literal "false"

\end_inset

.
\end_layout

\begin_layout Standard
\paragraph_spacing other 1.5
Bien qu'il soit possible pour un pair d'attendre la fin de la collecte ICE,
 il est généralement beaucoup plus efficace d'utiliser une technique de
 «ruissellement» et de transmettre chaque candidat ICE au pair distant au
 fur et à mesure qu'il en est découvert.
 Cela résulte par une réduction considérable du temps d'installation de
 la connectivité des pairs et permet d'entamer une conversation vidéo avec
 moins de retard
\begin_inset CommandInset citation
LatexCommand cite
key "webrtc-org-2014"
literal "false"

\end_inset

.
\end_layout

\begin_layout Standard
\paragraph_spacing other 1.5
Pour rassembler des candidats ICE, il suffit d'ajouter un écouteur pour
 l'événement 
\begin_inset listings
lstparams "style=ES6"
inline true
status open

\begin_layout Plain Layout

'icecandidate'
\end_layout

\end_inset

.
 L'événement RTCPeerConnectionICEevent émis sur cet écouteur contiendra
 la propriété 
\begin_inset listings
lstparams "style=ES6"
inline true
status open

\begin_layout Plain Layout

'candidate'
\end_layout

\end_inset

 qui représente un nouveau candidat qui devrait être envoyé au pair distant
\begin_inset CommandInset ref
LatexCommand eqref
reference "subsec:Signalisation-et-négotiation"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "style=ES6"
inline false
status open

\begin_layout Plain Layout

// Écouter les candidats ICE locaux sur l'objet RTCPeerConnection local
 
\end_layout

\begin_layout Plain Layout
\noindent

peerConnection.addEventListener('icecandidate', event => {
\end_layout

\begin_layout Plain Layout

  if (event.candidate) {
\end_layout

\begin_layout Plain Layout

    signalingChannel.send({'new-ice-candidate': event.candidate});
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

});
\end_layout

\begin_layout Plain Layout

// Écouter les candidats ICE distants et les ajouter
\end_layout

\begin_layout Plain Layout

// à la connexion RTCPeerConnection locale
\end_layout

\begin_layout Plain Layout

signalingChannel.addEventListener('message', async message => {
\end_layout

\begin_layout Plain Layout

  if (message.iceCandidate) {
\end_layout

\begin_layout Plain Layout

    try {
\end_layout

\begin_layout Plain Layout

      await peerConnection.addIceCandidate(message.iceCandidate);
\end_layout

\begin_layout Plain Layout

    } catch (e) {
\end_layout

\begin_layout Plain Layout

      console.error('Error adding received ice candidate', e);
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

});
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Gestion des candidats ICE
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\paragraph_spacing other 1.5
Une fois que les candidats ICE sont reçus, nous devons nous attendre à ce
 que l'état de notre connexion pair passe éventuellement à un état connecté.
 Pour détecter cela, nous ajoutons un écouteur à notre RTCPeerConnection
 où nous écoutons les événements 
\begin_inset listings
lstparams "style=ES6"
inline true
status open

\begin_layout Plain Layout

'connectionstatechange'
\end_layout

\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "webrtc-org-2014"
literal "false"

\end_inset

.
\end_layout

\begin_layout Section
getUserMedia
\end_layout

\begin_layout Standard
\paragraph_spacing other 1.5
L'API getUserMedia permet d'accéder aux flux multimédias (vidéo, audio ou
 les deux) à partir des périphériques locaux.
 À elle seule, cette API est capable d'acquérir de l'audio et de la vidéo,
 sans envoyer les données ni les stocker dans un fichier.
 Pour avoir un chat fonctionnel, nous devons envoyer ces données en utilisant
 l'API RTCPeerConnection.
\end_layout

\begin_layout Standard
\paragraph_spacing other 1.5
À elle seule, cette API est uniquement capable d'acquérir de l'audio et
 de la vidéo, sans envoyer les données ni les stocker dans un fichier.
 Pour avoir un chat fonctionnel, nous devons envoyer ces données en utilisant
 l'API RTCPeerConnection
\begin_inset CommandInset citation
LatexCommand cite
key "rosa-2014"
literal "false"

\end_inset

.
\end_layout

\begin_layout Subsection
Mediadevices
\end_layout

\begin_layout Standard
\paragraph_spacing other 1.5
L'interface Navigator représente l'état et l'identité de l'agent utilisateur.
 Il permet aux scripts de l'interroger et de s'enregistrer pour effectuer
 certaines activités.
 Un objet Navigator peut être récupéré à l'aide de la propriété 
\begin_inset listings
lstparams "style=ES6"
inline true
status open

\begin_layout Plain Layout

window.navigator
\end_layout

\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "mozilla-org-2021B"
literal "false"

\end_inset

.
\end_layout

\begin_layout Standard
\paragraph_spacing other 1.5
L'interface Navigator dans le navigateur fournit des fonctions et des propriétés
 pour accéder à l'état et aux fonctionnalités du navigateur grâce auxquelles
 nous pouvons obtenir l'état du navigateur ou accéder à un large éventail
 de fonctionnalités.
 Par exemple, en utilisant 
\begin_inset listings
lstparams "style=ES6"
inline true
status open

\begin_layout Plain Layout

navigator.online
\end_layout

\end_inset

, nous pouvons obtenir l'état de connexion du navigateur avec Internet
\begin_inset CommandInset citation
LatexCommand cite
key "rajan-2021"
literal "false"

\end_inset

.
\end_layout

\begin_layout Standard
\paragraph_spacing other 1.5
L'interface MediaDevices comprise dans Navigator, permet d'accéder aux périphéri
ques d'entrée multimédia connectés tels que les caméras et les microphones,
 ainsi que le partage d'écran.
 En substance, il vous permet d'accéder à n'importe quelle source matérielle
 de données multimédias
\begin_inset CommandInset citation
LatexCommand cite
key "mozilla-org-2021B"
literal "false"

\end_inset

.
\end_layout

\begin_layout Standard
\paragraph_spacing other 1.5
Les fonctions de l'objet mediaDevices fournissent des fonctionnalités telles
 que le partage d'écran, l'obtention de flux depuis la caméra et les microphones.
 La fonction getUserMedia est celle dont nous avons besoin pour récupérer
 les flux de la caméra et des microphones
\begin_inset CommandInset citation
LatexCommand cite
key "rajan-2021"
literal "false"

\end_inset

.
\end_layout

\begin_layout Subsection
Capture des médias et contraintes
\end_layout

\begin_layout Standard
\paragraph_spacing other 1.5
La méthode 
\begin_inset listings
lstparams "style=ES6"
inline true
status open

\begin_layout Plain Layout

getUsermedia()
\end_layout

\end_inset

 à besoin qu’on lui passe un objet MediaStreamConstraints en tant qu'argument
 pour qu’elle fonctionne.
 Cet argument, active le type de communication voulu (vidéo, audio ou les
 deux) et contient les contraintes ainsi que les paramètres du flux de média
 qui sera généré par la suite.
 La suppression de bruit, l’annulation de l’écho, le ratio de la vidéo,
 le volume du son, la luminosité de l’image, etc.
 sont quelques exemples de ces paramètres en question
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Une liste complète des contraintes et paramètres de flux de média peut être
 consultée à l'addresse url: https://developer.mozilla.org/en-US/docs/Web/API/Medi
aTrackConstraints
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "style=ES6"
inline false
status open

\begin_layout Plain Layout

// Caméra avec une résolution aussi proche que possible de 640x480
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

  'video': {
\end_layout

\begin_layout Plain Layout

    'width': 640,
\end_layout

\begin_layout Plain Layout

    'height': 480
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Éxemple de MediaStreamConstraints
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\paragraph_spacing other 1.5
Le dictionnaire MediaStreamConstraints est utilisé lors de l'appel à getUsermedi
a pour spécifier les types de pistes à inclure dans le MediaStream renvoyé
 et, éventuellement, pour établir des contraintes pour les paramètres de
 ces pistes
\begin_inset CommandInset citation
LatexCommand cite
key "mozilla-org-2021C"
literal "false"

\end_inset

.
\end_layout

\begin_layout Standard
\paragraph_spacing other 1.5
L’implémentation minimale requise par l’interface MediaStreamConstraints
 est la suivante: 
\begin_inset listings
lstparams "style=ES6"
inline true
status open

\begin_layout Plain Layout

{ video: true, audio: true }
\end_layout

\end_inset

.
 Cette dernière, indique que nous voulons que le flux généré comporte une
 voix et une vidéo en utilisant les configurations de contraintes et paramètres
 par défaut.
\end_layout

\begin_layout Standard
\paragraph_spacing other 1.5
Capturer les médias à partir des périphériques médias, dans le navigateur,
 en utilisant ces configurations de contraintes et de paramètres consiste
 à écrire les lignes de code suivantes.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "style=ES6"
inline false
status open

\begin_layout Plain Layout

const constraints: MediaStreamConstraint = { audio: true, video: true };
\end_layout

\begin_layout Plain Layout

navigator.mediaDevices.getUserMedia(constraints);
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Obtention des media audio et video locaux
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Échange des flux multimédia
\end_layout

\begin_layout Standard
\paragraph_spacing other 1.5
Une fois qu'un objet RTCPeerConnection est connecté à un peer distant, il
 est possible de diffuser de l'audio et de la vidéo entre eux.
 C'est le point où nous connectons le flux que nous recevons de 
\begin_inset listings
lstparams "style=ES6"
inline true
status open

\begin_layout Plain Layout

getUserMedia()
\end_layout

\end_inset

 à RTCPeerConnection.
\end_layout

\begin_layout Subsubsection*
Ajout des pistes locales
\end_layout

\begin_layout Standard
\paragraph_spacing other 1.5
Un flux multimédia se compose d'au moins une piste multimédia, et celles-ci
 sont ajoutées individuellement à la RTCPeerConnection lorsque nous voulons
 transmettre le média à l'homologue distant
\begin_inset CommandInset citation
LatexCommand cite
key "webrtc-org-2014A"
literal "false"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "style=ES6"
inline false
status open

\begin_layout Plain Layout

const localStream = await navigator.mediaDevices.getUserMedia({video: true,
 audio: true});
\end_layout

\begin_layout Plain Layout

const peerConnection = new RTCPeerConnection(iceConfig);
\end_layout

\begin_layout Plain Layout

localStream.getTracks().forEach(track => {
\end_layout

\begin_layout Plain Layout

  peerConnection.addTrack(track, localStream);
\end_layout

\begin_layout Plain Layout

});
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Ajout des pistes locales à l'objet RTCPeerConnection
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\paragraph_spacing other 1.5
Les pistes peuvent être ajoutées à RTCPeerConnection avant qu'il ne soit
 connecté à un pair distant, il est donc logique d'effectuer cette configuration
 le plus tôt possible au lieu d'attendre que la connexion soit terminée
\begin_inset CommandInset citation
LatexCommand cite
key "webrtc-org-2014A"
literal "false"

\end_inset

.
\end_layout

\begin_layout Subsubsection*
Ajout des pistes distantes
\end_layout

\begin_layout Standard
\paragraph_spacing other 1.5
Pour recevoir les pistes distantes qui ont été ajoutées par l'autre pair,
 nous enregistrons un écouteur sur l'objet RTCPeerConnection local écoutant
 l'événement 
\begin_inset listings
lstparams "style=ES6"
inline true
status open

\begin_layout Plain Layout

'track'
\end_layout

\end_inset

.
 Puisque la lecture est effectuée sur un objet MediaStream, nous créons
 d'abord une instance vide que nous remplissons ensuite avec les pistes
 du pair distant au fur et à mesure que nous les recevons
\begin_inset CommandInset citation
LatexCommand cite
key "webrtc-org-2014A"
literal "false"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "style=ES6"
inline false
status open

\begin_layout Plain Layout

const remoteStream = new MediaStream();
\end_layout

\begin_layout Plain Layout

const remoteVideo = document.querySelector('#remoteVideo');
\end_layout

\begin_layout Plain Layout
\noindent

remoteVideo.srcObject = remoteStream;
\end_layout

\begin_layout Plain Layout
\noindent

peerConnection.addEventListener('track', async (event) => {
\end_layout

\begin_layout Plain Layout

  remoteStream.addTrack(event.track, remoteStream);
\end_layout

\begin_layout Plain Layout

});
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Ajout des pistes distantes à l'objet RTCPeerConnection
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
RTCDatachannel
\begin_inset CommandInset label
LatexCommand label
name "sec:RTCDatachannel"

\end_inset


\end_layout

\begin_layout Subsection
Introduction
\end_layout

\begin_layout Standard
\paragraph_spacing other 1.5
La norme WebRTC couvre également une API pour l'envoi de données arbitraires
 sur une RTCPeerConnection.
 Les canaux de données prennent en charge les connexions à volume élevé
 et à faible latence ; un canal de données est un canal non multimédia qui
 prend uniquement en charge le transfert de données.
 Il contourne les serveurs et fournit aux développeurs Web des canaux configurab
les pour transférer des données
\begin_inset CommandInset citation
LatexCommand cite
key "haytham-2018"
literal "false"

\end_inset

.
\end_layout

\begin_layout Standard
\paragraph_spacing other 1.5
DataChannel permet l'échange bidirectionnel de données d'application arbitraires
 entre homologues — pensez à WebSocket, mais d'égal à égal, et avec des
 propriétés de livraison personnalisables du transport sous-jacent.
 Une fois la RTCPeerConnection établit, les pairs connectés peuvent ouvrir
 un ou plusieurs canaux pour échanger du texte ou des données binaires
\begin_inset CommandInset citation
LatexCommand cite
after "p. 348"
key "grigorik-2013"
literal "false"

\end_inset

.
\end_layout

\begin_layout Standard
\paragraph_spacing other 1.5
Cela se fait en appelant 
\begin_inset listings
lstparams "style=ES6"
inline true
status open

\begin_layout Plain Layout

createDataChannel()
\end_layout

\end_inset

 sur un objet RTCPeerConnection , qui renvoie un objet RTCDataChannel.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "style=ES6"
inline false
status open

\begin_layout Plain Layout

const peerConnection = new RTCPeerConnection(configuration);
\end_layout

\begin_layout Plain Layout

const dataChannel = peerConnection.createDataChannel();
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\paragraph_spacing other 1.5
Le pair distant peut recevoir des canaux de données en écoutant l'événement 
\begin_inset listings
lstparams "style=ES6"
inline true
status open

\begin_layout Plain Layout

'datachannel'
\end_layout

\end_inset

 sur l'objet RTCPeerConnection .
 L'événement reçu est du type RTCDataChannelEvent et contient une propriété
 
\begin_inset listings
lstparams "style=ES6"
inline true
status open

\begin_layout Plain Layout

'channel'
\end_layout

\end_inset

 qui représente le RTCDataChannel connecté entre les pairs
\begin_inset CommandInset citation
LatexCommand cite
key "webrtc-org-2014B"
literal "false"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "style=ES6"
inline false
status open

\begin_layout Plain Layout

const peerConnection = new RTCPeerConnection(configuration);
\end_layout

\begin_layout Plain Layout

peerConnection.addEventListener('datachannel', event => {
\end_layout

\begin_layout Plain Layout

  const dataChannel = event.channel;
\end_layout

\begin_layout Plain Layout

});
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Ouvrir et fermer des événements
\end_layout

\begin_layout Standard
\paragraph_spacing other 1.5
Avant qu'un canal de données puisse être utilisé pour envoyer des données,
 le client doit attendre qu'il soit ouvert.
 Cela se fait en écoutant l'événement 
\begin_inset listings
lstparams "style=ES6"
inline true
status open

\begin_layout Plain Layout

'open'
\end_layout

\end_inset

.
 De même, il y a un événement  
\begin_inset listings
lstparams "style=ES6"
inline true
status open

\begin_layout Plain Layout

'close'
\end_layout

\end_inset

  lorsque l'un des côtés ferme le canal
\begin_inset CommandInset citation
LatexCommand cite
key "webrtc-org-2014B"
literal "false"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "style=ES6"
inline false
status open

\begin_layout Plain Layout

// récupérer l'élément zone de texte
\end_layout

\begin_layout Plain Layout

const messageBox = document.querySelector('#messageBox');
\end_layout

\begin_layout Plain Layout

// Récupérer l'élément boutton
\end_layout

\begin_layout Plain Layout

const sendButton = document.querySelector('#sendButton');
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// Initier un connection puis un canal de données
\end_layout

\begin_layout Plain Layout

const peerConnection = new RTCPeerConnection(configuration);
\end_layout

\begin_layout Plain Layout

const dataChannel = peerConnection.createDataChannel();
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// Activer la zone de texte et le bouton à l'ouverture
\end_layout

\begin_layout Plain Layout

dataChannel.addEventListener('open', event => {
\end_layout

\begin_layout Plain Layout

  messageBox.focus();
\end_layout

\begin_layout Plain Layout

  messageBox.disabled = false;
\end_layout

\begin_layout Plain Layout

  sendButton.disabled = false;
\end_layout

\begin_layout Plain Layout

});
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// Désactiver l'entrée lorsqu'il est fermé
\end_layout

\begin_layout Plain Layout

dataChannel.addEventListener('close', event => {
\end_layout

\begin_layout Plain Layout

  messageBox.disabled = false;
\end_layout

\begin_layout Plain Layout

  sendButton.disabled = false;
\end_layout

\begin_layout Plain Layout

});
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
messages
\end_layout

\begin_layout Standard
\paragraph_spacing other 1.5
L'envoi d'un message sur un RTCDataChannel se fait en appelant la fonction 
\begin_inset listings
lstparams "style=ES6"
inline true
status open

\begin_layout Plain Layout

send()
\end_layout

\end_inset

 avec les données que nous voulons envoyer.
 Le paramètre de data pour cette fonction peut être une chaîne de caractères,
 un Blob , un ArrayBuffer ou/et ArrayBufferView
\begin_inset CommandInset citation
LatexCommand cite
key "webrtc-org-2014B"
literal "false"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "style=ES6"
inline false
status open

\begin_layout Plain Layout

const messageBox = document.querySelector('#messageBox');
\end_layout

\begin_layout Plain Layout

const sendButton = document.querySelector('#sendButton');
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// Envoyer un simple message texte lorsque nous cliquons sur le bouton
\end_layout

\begin_layout Plain Layout

sendButton.addEventListener('click', event => {
\end_layout

\begin_layout Plain Layout

  const message = messageBox.textContent;
\end_layout

\begin_layout Plain Layout

  dataChannel.send(message);
\end_layout

\begin_layout Plain Layout

});
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\paragraph_spacing other 1.5
Le pair distant recevra les messages envoyés sur un RTCDataChannel en écoutant
 l'événement 
\begin_inset listings
lstparams "style=ES6"
inline true
status open

\begin_layout Plain Layout

'message'
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "style=ES6"
inline false
status open

\begin_layout Plain Layout

const incomingMessages = document.querySelector('#incomingMessages');
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

const peerConnection = new RTCPeerConnection(configuration);
\end_layout

\begin_layout Plain Layout

const dataChannel = peerConnection.createDataChannel();
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// Ajouter de nouveaux messages à la boîte des messages entrants
\end_layout

\begin_layout Plain Layout

dataChannel.addEventListener('message', event => {
\end_layout

\begin_layout Plain Layout

  const message = event.data;
\end_layout

\begin_layout Plain Layout

  incomingMessages.textContent += message + '
\backslash
n';
\end_layout

\begin_layout Plain Layout

});
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Configuration de l'ordre et de la fiabilité des messages
\end_layout

\begin_layout Standard
\paragraph_spacing other 1.5
RTCDataChannel peut fonctionner en mode non fiable et non ordonné (analogue
 au User Datagram Protocol ou UDP), en mode fiable et ordonné (analogue
 au Transmission Control Protocol ou TCP) et en modes partiellement fiables
\begin_inset CommandInset citation
LatexCommand cite
key "ristic-2014"
literal "false"

\end_inset

 :
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vspace*{-0.5 cm}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
\paragraph_spacing other 1.5
\noindent
Un mode fiable et ordonné garantit la transmission des messages ainsi que
 l'ordre dans lequel ils sont délivrés . Cela prend une surcharge supplémentaire,
 ce qui rend potentiellement ce mode plus lent.
\end_layout

\begin_layout Itemize
\paragraph_spacing other 1.5
\noindent
Un mode peu fiable et non ordonné ne garantit pas que chaque message arrive
 de l'autre côté ni dans quel ordre ils y arrivent . Cela supprime la surcharge,
 permettant à ce mode de fonctionner beaucoup plus rapidement.
\end_layout

\begin_layout Itemize
\paragraph_spacing other 1.5
\noindent
Le mode de fiabilité partielle garantit la transmission du message dans
 une condition spécifique, telle qu'un délai de retransmission ou un nombre
 maximal de retransmissions . L'ordre des messages est également configurable.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vspace*{-0.8 cm}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\paragraph_spacing other 1.5
Les performances des deux premiers modes sont à peu près les mêmes lorsqu'il
 n'y a pas de pertes de paquets. Cependant, en mode fiable et ordonné, un
 paquet perdu provoque le blocage d'autres paquets derrière lui, et le paquet
 perdu peut être périmé au moment où il est retransmis et arrive. Il est
 bien sûr possible d'utiliser plusieurs canaux de données au sein de la
 même application, chacun avec sa propre sémantique fiable ou non
\begin_inset CommandInset citation
LatexCommand cite
key "ristic-2014"
literal "false"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float table
placement h
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="11" columns="4">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Ordonné
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Fiable
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Politique de fiabilité partielle
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Ordonné + fiable
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
oui
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
oui
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
n/a
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Désordonné + fiable
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
non
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
partiel
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
n/a
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Ordonné + partiellement fiable
\end_layout

\end_inset
</cell>
<cell multirow="3" alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
oui
\end_layout

\end_inset
</cell>
<cell multirow="3" alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
partiel
\end_layout

\end_inset
</cell>
<cell multirow="3" alignment="center" valignment="middle" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
nombre de retransmissions
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
(retransmission)
\end_layout

\end_inset
</cell>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Non ordonné + partiellement fiable
\end_layout

\end_inset
</cell>
<cell multirow="3" alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
non
\end_layout

\end_inset
</cell>
<cell multirow="3" alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
partiel
\end_layout

\end_inset
</cell>
<cell multirow="3" alignment="center" valignment="middle" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
nombre de retransmissions
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
(retransmission)
\end_layout

\end_inset
</cell>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Commandé + partiellement fiable
\end_layout

\end_inset
</cell>
<cell multirow="3" alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
oui
\end_layout

\end_inset
</cell>
<cell multirow="3" alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
partiel
\end_layout

\end_inset
</cell>
<cell multirow="3" alignment="center" valignment="middle" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
délai d'attente (ms)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
(chronométré)
\end_layout

\end_inset
</cell>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Non ordonné + partiellement fiable
\end_layout

\end_inset
</cell>
<cell multirow="3" alignment="center" valignment="middle" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
non
\end_layout

\end_inset
</cell>
<cell multirow="3" alignment="center" valignment="middle" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
partiel
\end_layout

\end_inset
</cell>
<cell multirow="3" alignment="center" valignment="middle" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
délai d'attente (ms)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
(chronométré)
\end_layout

\end_inset
</cell>
<cell multirow="4" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multirow="4" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multirow="4" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Fiabilité de DataChannel et configurations de livraison
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\paragraph_spacing other 1.5
Lors de la configuration d'un canal partiellement fiable, il est important
 de garder à l'esprit que les deux stratégies de retransmission sont mutuellemen
t exclusives.
 L'application peut spécifier soit un délai d'attente, soit un nombre de
 retransmissions, mais pas les deux ; cela générera une erreur.
 Sur ce, jetons un coup d'œil à l'API JavaScript pour configurer le canal
\begin_inset CommandInset citation
LatexCommand cite
after ", p. 353"
key "grigorik-2013"
literal "false"

\end_inset

 :
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "style=ES6"
inline false
status open

\begin_layout Plain Layout

/* Options de configuration de l'ordre et de la fiabilité des messages
\end_layout

\begin_layout Plain Layout

 * conf = {};
\end_layout

\begin_layout Plain Layout

 * conf = { ordered: false };
\end_layout

\begin_layout Plain Layout

 * conf = { ordered: true, maxRetransmits: customNum };
\end_layout

\begin_layout Plain Layout

 * conf = { ordered: false, maxRetransmits: customNum };
\end_layout

\begin_layout Plain Layout

 * conf = { ordered: true, maxRetransmitTime: customMs };
\end_layout

\begin_layout Plain Layout

 * conf = { ordered: false, maxRetransmitTime: customMs };
\end_layout

\begin_layout Plain Layout

*/
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

const conf = { ordered: false, maxRetransmits: 0 };
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// ...
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

const peerConnection = new RTCPeerConnection(iceConfig);
\end_layout

\begin_layout Plain Layout

const dataCahnnel = pc.createDataChannel('nomDuCanal', conf);
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\paragraph_spacing other 1.5
Chaque DataChannel peut être configuré avec des paramètres d'ordre et de
 fiabilité personnalisés, et les pairs peuvent ouvrir plusieurs canaux,
 qui seront tous multiplexés sur la même association SCTP.
 En conséquence, chaque canal est indépendant des autres, et les pairs peuvent
 utiliser différents canaux pour différents types de données, par exemple,
 une livraison fiable et dans l'ordre pour le chat peer-to-peer et une livraison
 partiellement fiable et dans le désordre pour les mises à jour d'applications
 transitoires ou de faible priorité
\begin_inset CommandInset citation
LatexCommand cite
after ", p. 353"
key "grigorik-2013"
literal "false"

\end_inset

.
\end_layout

\begin_layout Subsection
\noindent
Comparaison avec WebSocket
\end_layout

\begin_layout Standard
\paragraph_spacing other 1.5
L'API DataChannel reflète intentionnellement celle de WebSocket : chaque
 canal établi déclenche les mêmes rappels 
\begin_inset listings
lstparams "style=ES6"
inline true
status open

\begin_layout Plain Layout

'onerror'
\end_layout

\end_inset

, 
\begin_inset listings
lstparams "style=ES6"
inline true
status open

\begin_layout Plain Layout

'onclose'
\end_layout

\end_inset

, 
\begin_inset listings
lstparams "style=ES6"
inline true
status open

\begin_layout Plain Layout

'onopen'
\end_layout

\end_inset

 et 
\begin_inset listings
lstparams "style=ES6"
inline true
status open

\begin_layout Plain Layout

'onmessage'
\end_layout

\end_inset


\begin_inset CommandInset citation
LatexCommand cite
after "p. 348"
key "grigorik-2013"
literal "false"

\end_inset

.
\end_layout

\begin_layout Standard
\paragraph_spacing other 1.5
Cependant, RTCDataChannel adopte une approche différente
\begin_inset CommandInset citation
LatexCommand cite
key "ristic-2014"
literal "false"

\end_inset

 :
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vspace*{-0.5 cm}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
\paragraph_spacing other 1.5
\noindent
Il fonctionne avec l'API RTCPeerConnection, qui permet la connectivité peer-to-p
eer. Cela peut entraîner une latence plus faible : pas de serveur intermédiaire
 et moins de « sauts ».
\end_layout

\begin_layout Itemize
\paragraph_spacing other 1.5
\noindent
Il utilise le protocole de transmission de contrôle de flux (SCTP), permettant
 une sémantique de livraison configurable - livraison hors-service et configurat
ion de retransmission.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vspace*{-0.8 cm}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\paragraph_spacing other 1.5
Étant donné que DataChannel est peer-to-peer et s'exécute sur un protocole
 de transport plus flexible, il offre également un certain nombre de fonctionnal
ités supplémentaires non disponibles pour WebSocket.
 l'ensemble de codes précédents met en évidence, certaines des différences
 les plus importantes 
\begin_inset CommandInset citation
LatexCommand cite
after "p. 348"
key "grigorik-2013"
literal "false"

\end_inset

 :
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vspace*{-0.5 cm}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
\paragraph_spacing other 1.5
\noindent
Contrairement au constructeur WebSocket, qui attend l'URL du serveur WebSocket,
 DataChannel est une méthode 
\begin_inset Quotes fld
\end_inset

factory
\begin_inset Quotes frd
\end_inset

 sur de l'objet RTCPeerConnection.
\end_layout

\begin_layout Itemize
\paragraph_spacing other 1.5
\noindent
Contrairement à WebSocket, chaque pair peut initier une nouvelle session
 DataChannel: le rappel 
\begin_inset listings
lstparams "style=ES6"
inline true
status open

\begin_layout Plain Layout

'onDataChannel'
\end_layout

\end_inset

 est déclenché lorsqu'une nouvelle session DataChannel est établie.
\end_layout

\begin_layout Itemize
\paragraph_spacing other 1.5
\noindent
Contrairement à WebSocket, qui s'exécute sur un transport TCP fiable et
 ordonné, chaque DataChannel peut être configuré avec une livraison personnalisé
e et une sémantique de fiabilité.
\end_layout

\end_body
\end_document
